<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HTime</title>
  <subtitle>其实，不仅仅是CURD</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zeyu0633.com/"/>
  <updated>2017-07-09T07:17:24.326Z</updated>
  <id>http://blog.zeyu0633.com/</id>
  
  <author>
    <name>Htime</name>
    <email>code@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【呐喊】新博客地址通知</title>
    <link href="http://blog.zeyu0633.com/2017/07/09/endPage/"/>
    <id>http://blog.zeyu0633.com/2017/07/09/endPage/</id>
    <published>2017-07-09T07:00:00.000Z</published>
    <updated>2017-07-09T07:17:24.326Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转新家啦，本站不更啦······"><a href="#转新家啦，本站不更啦······" class="headerlink" title="转新家啦，本站不更啦······"></a>转新家啦，本站不更啦······</h3><a id="more"></a>
<h3 id="这个通知很奇怪"><a href="#这个通知很奇怪" class="headerlink" title="这个通知很奇怪"></a>这个通知很奇怪</h3><blockquote>
<p>两个方面比较奇怪</p>
<ul>
<li>也就通知给我自己，哈哈哈哈哈</li>
<li>新家暂时只支持自赏，不开放，哈哈哈哈哈</li>
</ul>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;转新家啦，本站不更啦······&quot;&gt;&lt;a href=&quot;#转新家啦，本站不更啦······&quot; class=&quot;headerlink&quot; title=&quot;转新家啦，本站不更啦······&quot;&gt;&lt;/a&gt;转新家啦，本站不更啦······&lt;/h3&gt;
    
    </summary>
    
    
      <category term="有缘再见" scheme="http://blog.zeyu0633.com/tags/%E6%9C%89%E7%BC%98%E5%86%8D%E8%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>GitLab+Docker+Jenkins自动化发布</title>
    <link href="http://blog.zeyu0633.com/2017/04/26/docker-index-C/"/>
    <id>http://blog.zeyu0633.com/2017/04/26/docker-index-C/</id>
    <published>2017-04-26T15:40:27.000Z</published>
    <updated>2017-04-27T03:06:19.375Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>自学笔记</p>
</blockquote>
<a id="more"></a>
<h2 id="正在写"><a href="#正在写" class="headerlink" title="正在写"></a>正在写</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自学笔记&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.zeyu0633.com/categories/docker/"/>
    
      <category term="SpringBoot" scheme="http://blog.zeyu0633.com/categories/docker/SpringBoot/"/>
    
    
      <category term="运维" scheme="http://blog.zeyu0633.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Java" scheme="http://blog.zeyu0633.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Docker</title>
    <link href="http://blog.zeyu0633.com/2017/04/26/springBootDocker/"/>
    <id>http://blog.zeyu0633.com/2017/04/26/springBootDocker/</id>
    <published>2017-04-26T15:20:27.000Z</published>
    <updated>2017-04-26T15:45:23.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>自学笔记</p>
</blockquote>
<a id="more"></a>
<h2 id="正在写···"><a href="#正在写···" class="headerlink" title="正在写···"></a>正在写···</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自学笔记&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.zeyu0633.com/categories/docker/"/>
    
      <category term="SpringBoot" scheme="http://blog.zeyu0633.com/categories/docker/SpringBoot/"/>
    
    
      <category term="运维" scheme="http://blog.zeyu0633.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Java" scheme="http://blog.zeyu0633.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>docker学习（实践篇）</title>
    <link href="http://blog.zeyu0633.com/2017/04/22/docker-index-B/"/>
    <id>http://blog.zeyu0633.com/2017/04/22/docker-index-B/</id>
    <published>2017-04-22T07:20:27.000Z</published>
    <updated>2017-04-23T05:28:37.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>自学笔记</p>
</blockquote>
<a id="more"></a>
<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><h3 id="macos安装docker"><a href="#macos安装docker" class="headerlink" title="macos安装docker"></a>macos安装docker</h3><p>我windows没有安装成功，所以就用macOS啦，macOS真的是太方便啦，dmg文件双击即可。</p>
<p>安装完成之后，用<code>docker version</code>来查看是否安装成功。<br><img src="http://upload-images.jianshu.io/upload_images/4943424-4cc4657b5b20ff56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装"></p>
<h2 id="docker初体验"><a href="#docker初体验" class="headerlink" title="docker初体验"></a>docker初体验</h2><h3 id="第一个docker镜像"><a href="#第一个docker镜像" class="headerlink" title="第一个docker镜像"></a>第一个docker镜像</h3><p>有两条命令需要学习</p>
<pre><code>* docker pull [OPTIONS] NAME[:TAG]：拉去一个镜像到我们的本地，Name表示拉取的镜像的名称。
* docker images[OPTIONS][RESPOSITORY[:TAG]]：查看我们本机都有哪些镜像
</code></pre><p>我拉这个hello-world真的是费劲，还好拉下来了，如下<br><img src="http://upload-images.jianshu.io/upload_images/4943424-3d9667536f710026.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一个镜像"></p>
<h3 id="第一个docker容器"><a href="#第一个docker容器" class="headerlink" title="第一个docker容器"></a>第一个docker容器</h3><p>有一条命令需要学习</p>
<pre><code>* docker run [OPTIONS] IMAGE[:TAG][COMMAND][ARG...]：运行一个叫做IMAGE名字的镜像
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/4943424-98ac0c6ca9b0df27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一个容器"></p>
<p>以上是docker操作的比较简单的步骤，已图的形式来讲解一下：<br><img src="http://upload-images.jianshu.io/upload_images/4943424-0d8ae92171e53e17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="docker使用流程"></p>
<pre><code>* Client是我们在本机执行命令的部分
* 中间的一部分也在我们本机，是docker daemon来管理的内容
* 最右边的是远程仓库
</code></pre><p>流程：执行<code>docker pull</code>，会先到daemon中查找有没有对应的镜像，如果存在且版本正确，就不会做任何操作，<br>如果不存在，它会到远成仓库拉取对应的docker镜像； <code>docker run</code>实际上相当于先执行一次<code>docker pull</code>，然后<br>已一定的方式将镜像运行起来，形成容器。</p>
<h2 id="docker运行nginx静态网站"><a href="#docker运行nginx静态网站" class="headerlink" title="docker运行nginx静态网站"></a>docker运行nginx静态网站</h2><h3 id="运行nginx镜像"><a href="#运行nginx镜像" class="headerlink" title="运行nginx镜像"></a>运行nginx镜像</h3><p>运行nginx之前：<br>1.nginx是一个web服务器，需要持久不间断的运行，所以它是一个持久运行容器。<br>2.之前运行的hello-world是在前台运，前台运行的容器是可以用ctrl+c去结束掉的。nginx可以选择前台运行也可以选择后台运行，所以，nginx最好的运行方式是选择后台运行。<br>3.将nginx启动之后，要进入到容器内部去看一下容器内部的模样。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-8a92d87ac489688b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拉取nginx容器"></p>
<p>开始运行：<br>1.从网易蜂巢镜像中心将镜像拉取到本地<code>docker pull hub.c.163.com/library/nginx:latest</code>,然后<code>docker run hub.c.163.com/library/nginx</code>运行该镜像,发现并没有什么反应，可以用<code>docker ps</code>查看目前正在这台机器上运行的容器，会发现又一个nginx的容器已经启动啦，但我们这种启动方式是前台启动，用<code>ctrl+c</code>把它停掉。<br>2.运行nginx最好还是后台运行，执行<code>docker run -d</code>（具体命令可以用<code>docker run --help</code>来查看）。<br><img src="http://upload-images.jianshu.io/upload_images/4943424-ff51ac9cc92f8559.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行nginx容器"><br>3.容器运行起来之后，比如看一下日志或者看一下系统是否正常，可以用<code>docker exec -it 容器ID</code>（具体命令可以用<code>docker exec --help</code>来查看）来让docker分配一个伪终端。<br><img src="http://upload-images.jianshu.io/upload_images/4943424-8df58ce4b19dc1b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进入nginx"></p>
<h3 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h3><p><img src="http://upload-images.jianshu.io/upload_images/4943424-c527015fdad0f1a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="docker网络"></p>
<p>为了在浏览器中访问到nginx！！！！fighting！！！！<br>1.网络类型<br>网络也是docker的隔离性的一部分。docker在默认情况下会分配一个独立的network namespace，虚拟出自己的网卡、路由等，也就是网络类型中的Bridge（桥接）。<br>2.端口映射<br>使得容器内的端口能够在主机上访问到。</p>
<p>用<code>docker stop 容器ID</code>将容器停掉先。<br>然后使用<code>docker run -d -p 8080:80 hub.c.163.com/library/nginx</code>来重新将容器运行起来，这个意思是说将主机的8080端口映射到容器的80端口，因为nginx的监听是在80端口。<br>在浏览器中输入<code>localhost:8080</code>，发现启动成功。<br><img src="http://upload-images.jianshu.io/upload_images/4943424-d52d999df56a74a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动成功"><br>另外，还可以使用<code>docker run -d -P hub.c.163.com/library/nginx</code>来用随机端口映射。</p>
<h2 id="第一个java-web应用"><a href="#第一个java-web应用" class="headerlink" title="第一个java web应用"></a>第一个java web应用</h2><h3 id="制作自己的镜像"><a href="#制作自己的镜像" class="headerlink" title="制作自己的镜像"></a>制作自己的镜像</h3><p>1.Dockerfile<br>这个文件要告诉docker怎么样制作镜像，每一步操作具体干什么。<br>2.docker build<br>执行Dockerfile里面定义的每一步操作，最终构建出来一个docker镜像。</p>
<p>以制作Jpress为例制作镜像。<br>1.到<code>https://git.oschina.net/fuhai/jpress</code>上的war文件夹中直接将war包下载下来。<br>2.首先我们要有一个基础镜像，就选用tomcat，因为tomcat镜像中一定会有jdk，从网易蜂巢镜像中心拉取tomcat镜像到本地。<br>3.写Dockerfile<br><img src="http://upload-images.jianshu.io/upload_images/4943424-e4a16cc8601fd9dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Dockerfile"><br>4.执行<code>docker build -t jpress:latest .</code>之后，可以看到<br><img src="http://upload-images.jianshu.io/upload_images/4943424-12d9d3d7e39fdbff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jpress镜像"></p>
<h3 id="运行自己的容器"><a href="#运行自己的容器" class="headerlink" title="运行自己的容器"></a>运行自己的容器</h3><p>执行<code>docker run -d -p 8888:8080 jpress</code>来启动jpress镜像。<br>可以执行<code>netstat -na|grep 8888</code>来查看端口是否处于监听。<br><img src="http://upload-images.jianshu.io/upload_images/4943424-165a2c8a8ad8aa11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行成功"></p>
<p>end！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自学笔记&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.zeyu0633.com/categories/docker/"/>
    
    
      <category term="运维" scheme="http://blog.zeyu0633.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>docker学习（概念篇）</title>
    <link href="http://blog.zeyu0633.com/2017/04/19/docker-index-A/"/>
    <id>http://blog.zeyu0633.com/2017/04/19/docker-index-A/</id>
    <published>2017-04-19T15:20:27.000Z</published>
    <updated>2017-04-22T09:21:19.301Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>自学笔记</p>
</blockquote>
<a id="more"></a>
<h2 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h2><p>docker是一个用来装应用的容器，就像杯子可以装水，笔筒可以放笔，书包可以放书一样。我们可以讲HelloWorld放到docker里，也可以把<br>网站放docker里，也可以把任何你想得到的程序放docker里。官网官网传送门<a href="https://www.docker.com/" target="_blank" rel="external">官网</a></p>
<h2 id="了解docker"><a href="#了解docker" class="headerlink" title="了解docker"></a>了解docker</h2><h3 id="docker思想"><a href="#docker思想" class="headerlink" title="docker思想"></a>docker思想</h3><p>docker的logo是一条鲸鱼，上面驮着很多集装箱，在大海里遨游！这个logo非常形象的体现啦docker的思想。</p>
<pre><code>* 集装箱
    * 我们可以将货物装到集装箱里，箱子很大而且是密封的，货物不容易丢失，可以保证我们的货物安全原样的送到目的地。
    * 将我们的程序类比货物，如果目前你要将程序运行到一台新的机器上去，那也许会跑不起来，比如少了什么配置文件啊
    什么的，有了docker的集装箱，就会帮我们解决这些问题，它能保证我们的程序不管运行到哪里都不会缺东西。
* 标准化
    * 运输方式：docker运输货物有一个超级码头，任何地方需要货物都是先让鲸鱼将货物送到超级码头，然后再由鲸鱼
    将货物送到目的地去。
    * 存储方式：不需要关心应用存在什么地方，因为他在集装箱里，你只需要一条命令就能运行它。
    * API接口： docker提供了一系列的API接口，去控制你的程序。
* 隔离
    * 基于linux的内核限制机制，隔离进程和资源
</code></pre><h3 id="docker解决了什么问题"><a href="#docker解决了什么问题" class="headerlink" title="docker解决了什么问题"></a>docker解决了什么问题</h3><p>一个基本的java web应用的启动一般依赖：</p>
<pre><code>* 操作系统
* jdk、tomcat
* 代码
* 配置文件 
</code></pre><p>这些以来的变化都有可能导致程序无法运行。</p>
<p>docker的做法：</p>
<pre><code>* 将操作系统、jdk、tomcat、代码、配置文件等等全部装到一个集装箱里
* 打包放到鲸鱼上，鲸鱼送到超级码头，然后再送到服务器上
* 所以程序运行是不会有变化的
</code></pre><p>其他：</p>
<pre><code>* 将大家的程序都放到docker里运行然后再放到同一台服务器上运行，如果别人的程序有死循环，疯狂
占用CPU，或者打日志将磁盘写满啦，或者占用大量内存导致内存泄漏，这种情况只会导致某人自己的程序崩溃，因为在docker启动的时候就限定好了程序使用的最大CPU和硬盘，
如果超过啦，那就会被杀掉。
* 临时扩展机器，给运维带来方便，点下鼠标就会能有100实例产生，给动态扩展、弹性伸缩带来方便。
</code></pre><h2 id="走进docker"><a href="#走进docker" class="headerlink" title="走进docker"></a>走进docker</h2><h3 id="docker核心技术"><a href="#docker核心技术" class="headerlink" title="docker核心技术"></a>docker核心技术</h3><p>docker有三个核心的词汇：</p>
<pre><code>* 镜像：集装箱（Build）
* 仓库：超级码头（Ship）
* 容器：运行程序的地方(Run)
</code></pre><p>docker运行一个程序的过程就是：到仓库把镜像拉倒本地，然后用一条命令将镜像运行起来，变成容器。</p>
<h3 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h3><p>镜像就是一些列的文件，可以包括应用程序的文件也可以包括应用运行环境的文件，镜像会存到本地，存储<br>技术叫做联合文件系统。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-b2575d03db5e2190.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镜像&amp;容器"></p>
<p>1.操作系统的引导<br>2.具体的一个linux操作系统<br>3.具体的软件，可以使tomcat和jdk<br>4.应用代码</p>
<p>每一层我们都可以自己控制。最上面一层是容器相关，下面说。<br>docker镜像每一层文件都是只读的，都加载完成之后，会被看成是一个目录（联合文件系统），相当于只有一个文件系统。</p>
<h3 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h3><p>容器的本质就是一个进程。</p>
<p>理解：还是这张图<br><img src="http://upload-images.jianshu.io/upload_images/4943424-b2575d03db5e2190.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镜像&amp;容器"><br>可以先将容器想象成一个虚拟机，每个虚拟机都有自己的文件系统，可以将上线这张图看做是容器的文件系统，这个文件系统是<br>一层一层的，并且下面的n层都是只读的，只有最上面的一层是可写的。</p>
<p>为什么要有可写的一层？</p>
<pre><code>如果程序要是运行起来，势必会要写一些日志或者是对文件做一些修改，这是大部分程序都有的需求，所以容器在
最上面一层创建了一个可读可写的文件层。
</code></pre><p>如果程序在运行期间要写一个镜像里的文件，怎么办？</p>
<pre><code>因为镜像里的每一层都是只读的，所以在写这个文件之前，会把这个文件这一层加载到最上层，然后再对它进行修改。
修改完之后，当应用要读一个文件时，会从最顶层开始查找，如果没有才会找下一层。
</code></pre><p><code>由于容器这一层是可以修改的，但是镜像是不可以修改的，这样就能保证：同一个镜像，可以生成多个容器独立运行，并且相互之间没有
干扰。</code></p>
<h3 id="docker仓库"><a href="#docker仓库" class="headerlink" title="docker仓库"></a>docker仓库</h3><p>docker为我们提供啦一个仓库，地址是<a href="https://hub.docker.com/" target="_blank" rel="external">docker仓库</a></p>
<p>速度比较好的仓库是<a href="https://c.163.com/" target="_blank" rel="external">网易蜂巢镜像中心</a></p>
<p>如果你的镜像比较私密，只是内部使用，docker支持自己搭建镜像中心，可以在自己的内网中搭建一个仓库。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下一篇将动手操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自学笔记&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.zeyu0633.com/categories/docker/"/>
    
    
      <category term="运维" scheme="http://blog.zeyu0633.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>GIT版本管理策略</title>
    <link href="http://blog.zeyu0633.com/2017/04/18/skill-git-manage/"/>
    <id>http://blog.zeyu0633.com/2017/04/18/skill-git-manage/</id>
    <published>2017-04-18T15:20:27.000Z</published>
    <updated>2017-04-19T00:29:54.311Z</updated>
    
    <content type="html"><![CDATA[<h3 id="纲要"><a href="#纲要" class="headerlink" title="纲要"></a>纲要</h3><blockquote>
<p>介绍使用Git这种有主干分支概念的工具开发项目时，进行版本管理的方法。</p>
</blockquote>
<a id="more"></a>
<h3 id="如图是黄勇（特赞CTO）分享的分支管理规范图"><a href="#如图是黄勇（特赞CTO）分享的分支管理规范图" class="headerlink" title="如图是黄勇（特赞CTO）分享的分支管理规范图"></a>如图是黄勇（特赞CTO）分享的分支管理规范图</h3><p><img src="http://upload-images.jianshu.io/upload_images/4943424-fe5f4423600b7b44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分支管理规范"></p>
<h3 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h3><ul>
<li>最稳定的代码放在master分支上（相当于SVN的trunk分支），我们不要直接在master分支上提交代码，只能在该分支上进行代码合并操作，例如将其他分支的代码合并到master分支上。</li>
<li>我们日常开发中的代码需要从master分支上拉一条develop分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其他分支合并到develop分支上去的。</li>
<li>当我们需要开发某个特性时，需要从develop分支上拉出一条feature分支，例如feature-1和feature-2，在这些分支上并行的开发具体特性。</li>
<li>当特性开发完毕后，我们决定发布某个版本啦，此时需要从develop分支上拉出一条release分支，例如release-1.0.0，并将需要发布的特性从相关feature分支一同合并到release分支上，随后针对release分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改bug。待测试工程师无法找到任何bug时，我们可将该release分支部署到预发布环境中。再次验证后，如无任何bug，此时可将release分支部署到生产环境中。待上线完成后，将release分支上的代码同时合并到develop分支和master分支上，并在master分支上带一个tag，例如v1.0.0。</li>
<li>当在生产环境发现bug时，我们需要从对应的tag上（例如v1.0.0）拉出一条hotfix分支（例如hotfix-1.01），并在该分支上进行bug修复。待bug修复完全后，需将hotfix分支上的代码同时合并到develop分支和master分支上。</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>对于版本号，格式为：x.y.z，其中，x用于有重大重构是才会升级，y用于有新的特性发布时才会升级，z用于修改了某个bug之后才会升级。</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>实际上，黄勇的开发规范就是业界知名的GitFlow，传送门<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">GitFlow</a></p>
<p>比较好的博客：<br>1.<a href="http://blog.jobbole.com/76867/" target="_blank" rel="external">Git工作流指南：Gitflow工作流</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;纲要&quot;&gt;&lt;a href=&quot;#纲要&quot; class=&quot;headerlink&quot; title=&quot;纲要&quot;&gt;&lt;/a&gt;纲要&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;介绍使用Git这种有主干分支概念的工具开发项目时，进行版本管理的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="GIT" scheme="http://blog.zeyu0633.com/categories/GIT/"/>
    
    
      <category term="技能" scheme="http://blog.zeyu0633.com/tags/%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>我们的产品思维</title>
    <link href="http://blog.zeyu0633.com/2017/04/14/product/"/>
    <id>http://blog.zeyu0633.com/2017/04/14/product/</id>
    <published>2017-04-14T15:20:27.000Z</published>
    <updated>2017-04-15T12:08:34.380Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小板凳搬过来坐好，现在以第一人称陈述冯总的产品思维"><a href="#小板凳搬过来坐好，现在以第一人称陈述冯总的产品思维" class="headerlink" title="小板凳搬过来坐好，现在以第一人称陈述冯总的产品思维"></a>小板凳搬过来坐好，现在以第一人称陈述冯总的产品思维</h3><blockquote>
<p>把自己逼到死角，想出最好的方案<br>　　　　　　　　　　　　—Van</p>
</blockquote>
<a id="more"></a>
<h3 id="真需求"><a href="#真需求" class="headerlink" title="真需求"></a>真需求</h3><p><img src="http://upload-images.jianshu.io/upload_images/4943424-eb65c404235ad84e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="真需求"></p>
<p>很多时候我们在做一个产品的时候，或者说在做一个事情，比如：做一把椅子也好、做一台笔记本电脑也好，那么我们首先要想到的是说，我们做的这个东西是不是用户真正做需要的，这就是一个需求的点。</p>
<ul>
<li><p>那么我们怎么去判断一个需求是一个真正的需求还是一个伪需求，我认为第一点是判断这个需求是不是用户所真正需要的，这是什么概念呢？比如说我们做一个产品，那么一定要有一部分用户是离不开你的，比方说我们今天头脑发热把亲宝宝给shut down，那么一定会有人打电话到我们这里来、有人会找到我你不应该这么干甚至说有人会告我们，就是说，这个产品做到了有人离不开你啦，他每天都会用到你或者说周期性的用到你，那么这种产品才真正能称为是一种需求，所谓的刚需。我们这里不是说指望所有的人都用到你，我认为这是一个比例的问题，比如说有10%~15%，他是重度用户，30%~40%是轻度用户或者说是中度用户，所以大家去想一下，有些东西也许看上去是有用处的，但实际上是没有的，但是有些东西的定义就是说他一定是有需求的，举个例子来说：理发店。所以我们做产品，首先要找到刚需，是真正对一部分用户一定有用处的，少了就会觉得有问题、会焦虑。</p>
</li>
<li><p>那另外一点我认为是高频，如果你做的这个需求不是一个高频（这里主要指互联网产品）其实也是有问题的，举个例子来说，比如楼下的无人水果售卖货架，那我觉得这对很多人来说可能使用频次不够高，他花了很多钱去推了一个用户进来，这其实是无发养成用户习惯的，你很难去对用户进行转化。所以，高频是十分重要的，原因是对于一个互联网产品来说，如果你的频次非常低，你的推广成本就会非常高，用户的习惯不能养成，这个时候你花很多钱去买一个用户来，结果会全都流失掉啦，没有用处。</p>
</li>
<li><p>还有一个点我认为是普世，应该是一定的大众化，如果你做的太垂直，没有足够的用户量，那么最终这个产品也是没有用处的，除非是那种非常高价值的产品，比如像英语教学的VIPKID这种，但是对于大部分互联网产品来说，我认为普世是很重要的，也就是说你这个需求一定是有一定的用户基础的，比如是亿级别或者是大几千万级别，你才会有用处，不然你的推广会出问题的，形不成足够的用户量，你最终的变现会是很难的。一个公司如果能被成为一个好公司或者是能够上市，那么起码DAU要达到500万以上，才会有价值，这样你才能拥有一个比较好的现金流，才能嫁接商业模式。</p>
</li>
</ul>
<p>所以，我对于一个互联网产品的理解，我们到底做什么或者不做什么，我认为第一要刚需、第二要高频、第三要普世，这三个都具备啦，那么我们就能找到一个相对大的并且需要你的用户量。</p>
<h3 id="创新"><a href="#创新" class="headerlink" title="创新"></a>创新</h3><p><img src="http://upload-images.jianshu.io/upload_images/4943424-dcfdbbfc5d099a4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创新"></p>
<ul>
<li><p>如果你要把一个产品做好，也就是说你想在这个世界上或者说在中国能被称为第一第二，我认为创新是必须的。刚开始，也许通过拷贝别人得到了一些用户量，但是最后的竞争肯定是头部竞争，如果你没有自己的独创性、没有自己的坚持、没有自己的创新，你很难能够走下去。那么创新是什么呢？我总结了自己这几年来做产品的经验，可以总结成一句话：把自己逼到死角，想出最好的方案。我观察很多人做事情，你不能说他不努力，但是他最多就能做到70分，不可能做到九十分或者更高，这个原因我觉得是说在中国很大一部分人眼里，总觉的差不多就行啦，最终对事情就有了一个差不多的概念。那么如果你想达到一个创新的结果，你就是要把自己逼到死角里去，拿出最好的方案。在实际的操作中，把自己得到的第一个方案第二个方案抛弃掉，然后再去想想第三个有没有更好的方案，或者是说不断地来回几个迭代，看看会不会有什么问题。</p>
</li>
<li><p>我认为创新还有一个点，创新一定不是凭空想出来的，他一定是在一定基础上做出来的，我认为最好的办法就是学习最好的东西，也就是找标杆，要找普世的标杆，比如说苹果的设计、谷歌的设计或者微软的一些解决方案等等。你会发现很多东西这些标杆们确实已经做到极致啦，我们可以从这里面学到很多东西，学完之后，要对这些东西做一些变通，增加一些自己的元素进去，我觉得这就是一个创新的过程。你要做到创新的过程是很辛苦的，但是你一旦达到啦，那结果一定让你大吃一惊。</p>
</li>
</ul>
<h3 id="专注"><a href="#专注" class="headerlink" title="专注"></a>专注</h3><p><img src="http://upload-images.jianshu.io/upload_images/4943424-7db41d3a786312d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="专注"></p>
<p>在我们公司运作过程中，一直指导我们的就是专注。</p>
<ul>
<li><p>为什么要做专注呢？在互联网行业，竞争是很残酷的，如果你没有在一个领域里做到第一，那么你的结果要么是自生自灭死掉啦，要么就是卖给别人啦，总之是没有什么大的结果。放眼看，头部的互联网公司一定是在某个点上做的最好的或者是在一个时间范围内做的最好的。在公司初期，你还没有那么大的能力的时候，如果你想到最好，你只有将所有精力放到一点上，去突破。这么很容易理解，将比如说钉子为什么能够比较容易的顶到墙里去，但是如果你那一张纸，是不可能嵌到墙里去的，它核心的逻辑是通过一个点去戳穿一个事情继而带动后面一个很长的一个尾巴，然后把所有东西都推出去。所以，我们只有专注在一个事情上，把这个事情不断做好，才有可能成功。专注首先要确定方向，也就是我们该往哪里走，我们的目标是什么，我们要服务的用户人群是什么。</p>
</li>
<li><p>其次，我们永远要用2/8原则来考虑事情，很多时候，说白啦，我们做的事情中有80%是无效的，只有20%是有用处的。但是对用户来说，我们只要把头部的20%做好就可以啦，另外的甚至都可以不用做。如果我们有这个原则在脑子里，你会发现，其实很多东西都被我们砍掉啦，这一点，在产品经理层面是经常使用的。还有一个原则就是坚持，你只有坚持才有专注，这两个词是互补的。</p>
</li>
</ul>
<p>专注，最终得到的结果，就是将一个事情做到极致，做到谁都无法超越，以点带面，那么这个事情就有价值。</p>
<h3 id="简洁易用"><a href="#简洁易用" class="headerlink" title="简洁易用"></a>简洁易用</h3><p><img src="http://upload-images.jianshu.io/upload_images/4943424-91aec767f34913c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="简洁易用"></p>
<ul>
<li><p>简洁易用是偏实用性的一个指导思想，我们做任何事情都要做到简洁易用，也就是让用户能用的来，方便上手。我们一定要理解一件事：人是很笨的，用户其实根本不知道你产品里的很多逻辑，或者是你在设计这个产品时候的场景是什么，用户很多时候是突然开始使用你的功能，他不可能像你一样很明白这个功能的前因后果，那么如何让用户能尽可能的最快理解你的产品是做什么的呢？核心的思想就是做简单，能不放的就不放，一目了然，而不是把所有的东西都堆上去。</p>
</li>
<li><p>简洁易用，首先要做到符合人性。就比如读一篇文章，有些文章你读下来能很容易的读明白，但有的文章会让你感觉前后矛盾，废话连篇，这个是为什么？说白了就是写文章的人有没有理解人性，理解人是怎么思维的，是怎么接受新的事物的。再比如一个界面，它的左上角和右下角一定是不一样的，人一眼看过去，左边的东西和右边的东西，他的聚焦，他能在脑子里形成的结果是一定有差异的，所以，这些都是有一套逻辑在里面的。所以我建议大家都应该去看一些基本的心理学的东西，理解一个普通人是怎么思维的，我推荐的心理学的书是《思考，快与慢》，我觉得这本书是讲的很透彻的。另外一点就是自然，其实，简单的东西一定是自然的，他一定是这个样子的，多一个像素不多，少一个像素不少，没有废的东西。</p>
</li>
<li><p>简洁易用最终达到的一个结果就是无学习成本，就是说一个正常智力的人，基本上无学习成本的就可以上手，他知道你要传递的信息是什么，我觉得我们应用中有些地方还是没有做到的，这应该是我们努力的一个方向。</p>
</li>
</ul>
<h3 id="快速迭代"><a href="#快速迭代" class="headerlink" title="快速迭代"></a>快速迭代</h3><p><img src="http://upload-images.jianshu.io/upload_images/4943424-79b6834befdb5e68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="快速迭代"></p>
<ul>
<li><p>快速迭代是指导我们实际运作的一个过程，开发一个应用或者做一个产品，是一个非常难的事情，很难一下子就能够想清楚、想透彻。那么，我们能做的唯一的方法就是：快速迭代，不断试错，用数据来验证。每次都应该少做一点，因为你把问题缩小到一个比较小的范围内，那么你的解决方案能想得更具体一些，所以这也是我们在过去几年中用的非常顺手的一个方法。</p>
</li>
<li><p>快速迭代，第一点应该是小版本，每次都少做一点，虽然你想的也许是一个巨大的事情，我么要用2/8的原则，先把里面最最重要的东西挑出来，去做成一个版本。假如刚开始你想了100个需求，如果你要用快速迭代的思维去做了个版本之后你再回头去看，也许当初想得那100个需求你只需要其中50个，其他的根本就可以丢掉啦。所以我们在做整个产品的过程中，逐步的小步快跑的过程中，其实也是不断理解这个产品的过程，把做产品看成一个寻找最优解的过程，快速迭代可以帮你认清需求，区分真伪。</p>
</li>
<li><p>快速迭代能够更快地与用户建立起联系，更快地拿到用户的反馈，然后再去逐步优化这个产品，所以用户反馈是需要看重的。除了用户给你的反馈之外，数据是能够比较清晰的告诉你你做的是对的还是不对的，或者是需要改进的空间。所以，数据的收集与分析，再加上用户的反馈，最终会作用于你下一个迭代的方向。</p>
</li>
<li><p>我们现在用的很多一个概念叫做AB测试。AB测试在用户规模比较小的时候是没有什么用处的，但是到了我们这个规模，AB测试其实就是一个常态，我们以后任何重要的版本都需要组AB测试。我们到今天，其实很难去承受一个版本的回退，版本迭代中是有一个回退的概念的，因为你这个版本其实不一定比你上一个版本好，那我们又要保证版本的不断迭代，又要去寻找最优的解，又要保证我做的事情不把他做坏或者说产生倒退，我认为最最有效的方法就是做AB测试，我们小规模的把这个版本放出去，看看这个结果是怎么样的，如果是好的，我们再让更多的人去使用。</p>
</li>
</ul>
<h3 id="系统思维"><a href="#系统思维" class="headerlink" title="系统思维"></a>系统思维</h3><p><img src="http://upload-images.jianshu.io/upload_images/4943424-85eb6e5951997250.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="系统思维"></p>
<p>我们做很多的事情都是要从系统的角度去考虑问题的，如果你去考虑一个问题，先是从一个顶层的点去想问题，把这个问题抽象的比较高级一点，然后逐步的一层一层下来，你会发现，解决问题会比较容易些。</p>
<ul>
<li><p>亲宝宝在做的过程中，我会比较多的使用系统思维，这也是我比较重要的一个思维习惯，我会先把事情拉倒一个比较顶部的层面，分成一个个比较大的块去做，然后再去逐步细化每个模块，先从全局考虑问题，然后在到局部去解决问题，然后将每个模块自然地融合在一起。其实这个世界大部分东西都是由系统构成的，比如人就是几个大模块在一起干活。对于亲宝宝来说，整个应用其实是由一个单一的功能逐步演化成一个大的产品，从不同的层面看，其实他是一个个不同的系统，从服务器到应用来看，是服务器模块和应用模块组合在一起，形成一个更大的解决方案，从功能的角度来说，不同的功能整合在一起，又构成了一个系统。</p>
</li>
<li><p>系统思维，我们首先考虑的一点是这个系统是怎么发展出来的，他其实是从点到面出来的，就像我们每个人是怎么来的一样。我们要从无到有构建一个系统，比如构建亲宝宝的时候，加入我们退回去，退回到几年前，我们其实就是一个点到面的过程。</p>
</li>
<li><p>有了面之后，其实我们就会进入到一个生态的状态，我们期望在今后的三到四年，我们能把亲宝宝构建成一个小的生态，服务于我们现有的人群的一个生态。其实一个企业能够做起来，大部分都是从点到面再到生态，或者大家可以理解成一个种子掉到地上，慢慢成长为一棵树，然后在慢慢变成一片森林，最终形成了一个生态环境。</p>
</li>
</ul>
<h3 id="智能化"><a href="#智能化" class="headerlink" title="智能化"></a>智能化</h3><p><img src="http://upload-images.jianshu.io/upload_images/4943424-e31a8d6d12f73b9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="智能化"></p>
<ul>
<li><p>大数据其实不仅仅是一个技术层面的事情或者说一个产品经理的事情，这是我们整个运营思维的一个逻辑，无论是电商，无论是做智育的还是小报的，或者是做市场推广的，我们都会基于大数据的思维来考虑问题，所有的东西出去，怎么精准的推送给一个用户，怎么样我们的数据回来，然后我们再怎么样去分析这个结果，这里面都是有一套逻辑的。在过去大家感受的也许不是很深，在接下来的运营过程中，比如我们卖货不会是一种简单的方式，而是将用户的需求，非常精准的匹配到商品上，我们通过大数据去计算，用户真正需要的是什么，然后我们再去看，这个推送的效果是不是正确的，是不是合理的，提袋率是不是对的，如果不对，下一步你要怎么去优化。基于大数据的逻辑，我们能够将真个运营做的很棒。我认为用大数据要解决的一个核心问题其实需求对接，我怎么样把服务，把知识体系，把商品非常精准的对接给用户，这个用户真正是需要的。</p>
</li>
<li><p>在我们基于大数据做的很深入的情况下，我们下一步可以做到基于深度学习的运营框架，这个方面我也还没有深入了解，只是觉得我们是应该这么去做，大家可以想像一下，如果哪一天我们的育儿体系可以真正跟人进行交互，用户问我们一些问题，能够给出很好的答案。</p>
</li>
<li><p>智能化，是在未来整个公司发展过程中要去重点做的一个事情，为什么我们今天要提智能化，其实我们根本上还是想给人家做的不一样，我们不仅仅是一个社区的运营的一个公司，我们还是希望能够有一些技术的底蕴，有一些科技的底蕴，真正去做一些符合潮流的事情，虽然我们做的点是说在帮助整个中国的家庭很好的带孩子，帮助他们科学的去培育孩子或者是提供一个家人之间关爱孩子的一个平台和方式。</p>
</li>
</ul>
<h3 id="工匠精神"><a href="#工匠精神" class="headerlink" title="工匠精神"></a>工匠精神</h3><p><img src="http://upload-images.jianshu.io/upload_images/4943424-0fec814370a4eaba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="工匠精神"></p>
<ul>
<li><p>工匠精神在我之前的七点之中已经或多或少的提到啦，最终我们要做好一个事情，还是要归结于这四个字的。这里的逻辑是这样的：我们宁可做慢一些，也不要把这个事情做坏，一定要做一个好的东西。</p>
</li>
<li><p>我认为我们机会在于我们做到比竞争对手更好，贯彻工匠精神，去做细做好，这个是我们的机会所在。基于这一点，我要强调一下，他其实不仅仅是产品经理的活，也不是研发部门的活，这个是整个公司所有运营人员的活，比如我们卖一个商品，这个商家提供的图是乱七八糟的，然后我们就给放上去啦，最终在产品中体现出来的也是乱七八糟的，那这样其他地方做的好是没有用的，用户一进来看到这个商品之后对这个产品的印象马上就不一样啦。也就是说，一个产品的好与坏，他其实不是某一个职能部门的事情，他是一个体系的事情，工匠精神指的是所有人的工匠精神。</p>
</li>
</ul>
<p><code>我永远认为时间花下去是有价值的。</code></p>
<p>end!</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小板凳搬过来坐好，现在以第一人称陈述冯总的产品思维&quot;&gt;&lt;a href=&quot;#小板凳搬过来坐好，现在以第一人称陈述冯总的产品思维&quot; class=&quot;headerlink&quot; title=&quot;小板凳搬过来坐好，现在以第一人称陈述冯总的产品思维&quot;&gt;&lt;/a&gt;小板凳搬过来坐好，现在以第一人称陈述冯总的产品思维&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;把自己逼到死角，想出最好的方案&lt;br&gt;　　　　　　　　　　　　—Van&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Van" scheme="http://blog.zeyu0633.com/categories/Van/"/>
    
    
      <category term="产品" scheme="http://blog.zeyu0633.com/tags/%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建个人主页、博客和在线简历</title>
    <link href="http://blog.zeyu0633.com/2017/04/12/createSelfPages/"/>
    <id>http://blog.zeyu0633.com/2017/04/12/createSelfPages/</id>
    <published>2017-04-12T04:20:27.000Z</published>
    <updated>2017-04-15T12:10:12.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分享一下如下内容的搭建方式，让大家能够在网络上有一个自己的窝"><a href="#分享一下如下内容的搭建方式，让大家能够在网络上有一个自己的窝" class="headerlink" title="分享一下如下内容的搭建方式，让大家能够在网络上有一个自己的窝"></a>分享一下如下内容的搭建方式，让大家能够在网络上有一个自己的窝</h2><blockquote>
<ol>
<li>主页</li>
<li>博客</li>
<li>在线简历</li>
</ol>
</blockquote>
<a id="more"></a>
<h2 id="你需要准备"><a href="#你需要准备" class="headerlink" title="你需要准备"></a>你需要准备</h2><ul>
<li>conding账号</li>
<li>万网域名</li>
<li>github账号</li>
<li>友言账号</li>
<li>掌握基本的Markdown语法</li>
</ul>
<h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><p>效果<a href="http://blog.zeyu0633.com/">博客传送门</a></p>
<blockquote>
<p>参照</p>
<ol>
<li><a href="http://code.youmeek.com/2016/02/29/2016/02/Hexo-Intensify/" target="_blank" rel="external">http://code.youmeek.com/2016/02/29/2016/02/Hexo-Intensify/</a></li>
<li><a href="http://code.youmeek.com/2016/02/28/2016/02/Hexo/" target="_blank" rel="external">http://code.youmeek.com/2016/02/28/2016/02/Hexo/</a></li>
</ol>
</blockquote>
<ul>
<li>评论插件我用的是<code>友言</code>系统</li>
<li>按照以上两篇博文，一步一步操作即可</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-2df4ba29f486b238.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="博客"></p>
<h2 id="个人主页搭建"><a href="#个人主页搭建" class="headerlink" title="个人主页搭建"></a>个人主页搭建</h2><p>效果<a href="https://page.zeyu0633.com/" target="_blank" rel="external">主页传送门</a></p>
<ol>
<li>主页模板我是从<a href="https://html5up.net/" target="_blank" rel="external">https://html5up.net/</a>中找的，找到你喜欢的模板下载下来</li>
<li>在<a href="https://coding.net/" target="_blank" rel="external">https://coding.net/</a>上新建一个项目然后将模板上传上去</li>
<li>开启该项目的pages服务，然后绑定你的域名即可</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-ffe98c126cd968ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个人主页"></p>
<h2 id="在线简历搭建"><a href="#在线简历搭建" class="headerlink" title="在线简历搭建"></a>在线简历搭建</h2><p>效果<a href="http://resume.zeyu0633.com/" target="_blank" rel="external">在线简历传送门</a></p>
<ol>
<li>简历模板我实在<a href="http://jekyllthemes.org/" target="_blank" rel="external">http://jekyllthemes.org/</a>找到的，找到你喜欢的模板下载下来</li>
<li>在<a href="https://coding.net/" target="_blank" rel="external">https://coding.net/</a>上新建一个项目然后将模板上传上去，因为coding已经完美支持jekyll，所以无需额外配置</li>
<li>开启该项目的pages服务，然后绑定你的域名即可</li>
</ol>
<blockquote>
<p>我在使用jekyll时遇到的问题：</p>
<p>绑定自己的域名之后发现图片等资源都没有引入，经过一些捯饬，选择将静态资源都已绝对路径的形式访问，得以解决。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-9aa5e2ad988a23bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在线简历"></p>
<h2 id="欢迎打扰"><a href="#欢迎打扰" class="headerlink" title="欢迎打扰"></a>欢迎打扰</h2><p><img src="http://upload-images.jianshu.io/upload_images/4943424-2085126a473f38d9.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个人微信"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分享一下如下内容的搭建方式，让大家能够在网络上有一个自己的窝&quot;&gt;&lt;a href=&quot;#分享一下如下内容的搭建方式，让大家能够在网络上有一个自己的窝&quot; class=&quot;headerlink&quot; title=&quot;分享一下如下内容的搭建方式，让大家能够在网络上有一个自己的窝&quot;&gt;&lt;/a&gt;分享一下如下内容的搭建方式，让大家能够在网络上有一个自己的窝&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;主页&lt;/li&gt;
&lt;li&gt;博客&lt;/li&gt;
&lt;li&gt;在线简历&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技能" scheme="http://blog.zeyu0633.com/categories/%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="技能" scheme="http://blog.zeyu0633.com/tags/%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程</title>
    <link href="http://blog.zeyu0633.com/2017/04/06/java-thread/"/>
    <id>http://blog.zeyu0633.com/2017/04/06/java-thread/</id>
    <published>2017-04-06T15:00:00.000Z</published>
    <updated>2017-04-06T15:38:31.041Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>纲要</p>
<ul>
<li>认识线程</li>
<li>认识synchronized</li>
<li>其他关于线程的知识【中断、协作】</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="认识线程"><a href="#认识线程" class="headerlink" title="认识线程"></a>认识线程</h2><h3 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h3><p>线程表示一条单独的执行流，它有自己的程序执行计数器，有自己的栈。</p>
<h3 id="如何使用线程"><a href="#如何使用线程" class="headerlink" title="如何使用线程"></a>如何使用线程</h3><p>在Java中创建线程有两种方式，一种是继承Thread，另外一种是实现Runnable接口。</p>
<ul>
<li>继承Thread<br>Java中java.lang.Thread这个类表示线程，一个类可以继承Thread并重写其run方法来实现一个线程<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello thread!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注意点</p>
<ul>
<li>run方法的方法签名是固定的，public，没有参数，没有返回值，不能抛出受检异常</li>
</ul>
</blockquote>
<p>执行方式</p>
<pre><code>Thread thread = new HelloThread();
thread.start();
</code></pre><p>创建一个线程对象，然后调用start方法，这样，线程就起来啦</p>
<blockquote>
<p>注意点</p>
<ul>
<li>只有调用start方法，才能启动线程，使其成为一条独立的执行语句</li>
<li>如果是调用run方法，那么代码依然在原先的线程中执行，run只是一个普通的方法调用</li>
</ul>
</blockquote>
<p>要想验证，Thread有一个静态方法currentThread，返回当前执行的线程对象，每个Thread都有一个id和name<br>可以通过Thread.currentThread().getName()来打印出线程名称来验证。</p>
<ul>
<li>实现Runnable接口<br>通过继承Thread来实现线程虽然比较简单，但我们知道，Java中只支持单继承，每个类最多只能有一个父类，如果类已经有父类了，就不能再继承Thread，这时，可以通过实现java.lang.Runnable接口来实现线程。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello thread!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>执行方式</p>
<pre><code>Thread helloThread = new Thread(new HelloRunnable());
helloThread.start();
</code></pre><blockquote>
<p>注意点</p>
<ul>
<li>仅仅实现Runnable是不够的，要启动线程，还是要创建一个Thread对象，但传递一个Runnable对象</li>
<li>无论是通过继承Thead还是实现Runnable接口来实现线程，启动线程都是调用Thread对象的start方法。</li>
</ul>
</blockquote>
<h3 id="除此之外？"><a href="#除此之外？" class="headerlink" title="除此之外？"></a>除此之外？</h3><ul>
<li>优先级</li>
<li>状态</li>
<li>sleep方法</li>
<li>yield方法</li>
<li>join方法</li>
<li>过时方法</li>
<li>共享内存</li>
<li>竞态条件</li>
<li>内存可见性</li>
</ul>
<h2 id="认识synchronized"><a href="#认识synchronized" class="headerlink" title="认识synchronized"></a>认识synchronized</h2><h3 id="为什么要用"><a href="#为什么要用" class="headerlink" title="为什么要用"></a>为什么要用</h3><p>多线程共享内存的两个问题，一个是竞态条件，另一个是内存可见性，解决这两个问题的一个方案是使用synchronized关键字</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">incr</span><span class="params">()</span></span>&#123;</div><div class="line">        count ++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Counter是一个简单的计数器类，incr方法和getCount方法都加了synchronized修饰。加了synchronized后，方法内的代码就变成了原子操作，当多个线程并发更新同一个Counter对象的时候，也不会出现问题</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    Counter counter;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CounterThread</span><span class="params">(Counter counter)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.counter = counter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">10</span>));</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        &#125;</div><div class="line">        counter.incr();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">int</span> num = <span class="number">100</span>;</div><div class="line">        Counter counter = <span class="keyword">new</span> Counter();</div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[num];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> CounterThread(counter);</div><div class="line">            threads[i].start();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">            threads[i].join();</div><div class="line">        &#125;</div><div class="line">        System.out.println(counter.getCount());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建了100个线程，传递了相同的counter对象，每个线程主要就是调用Counter的incr方法，main线程等待子线程结束后输出counter的值，这次，不论运行多少次，结果都是正确的100。<br>666~</p>
<p>synchronized实例方法实际保护的是同一个对象的方法调用，确保同时只能有一个线程执行。再具体来说，synchronized实例方法保护的是当前实例对象，即this，this对象有一个锁和一个等待队列，锁只能被一个线程持有，其他试图获得同样锁的线程需要等待，执行synchronized实例方法的过程大概如下：</p>
<ul>
<li>尝试获得锁，如果能够获得锁，继续下一步，否则加入等待队列，阻塞并等待唤醒</li>
<li>执行实例方法体代码</li>
<li>释放锁，如果等待队列上有等待的线程，从中取一个并唤醒，如果有多个等待的线程，唤醒哪一个是不一定的，不保证公平性</li>
</ul>
<blockquote>
<p>注意点<br>synchronized同样可以用于静态方法<br>synchronized保护的是对象，对实例方法，保护的是当前实例对象this，对静态方法，保护的是哪个对象呢？是类对象，这里是StaticCounter.class，实际上，每个对象都有一个锁和一个等待队列，类对象也不例外。<br>synchronized静态方法和synchronized实例方法保护的是不同的对象，不同的两个线程，可以同时，一个执行synchronized静态方法，另一个执行synchronized实例方法。<br>synchronized同步的对象可以是任意对象，任意对象都有一个锁和等待队列，或者说，任何对象都可以作为锁对象。</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纲要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认识线程&lt;/li&gt;
&lt;li&gt;认识synchronized&lt;/li&gt;
&lt;li&gt;其他关于线程的知识【中断、协作】&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="线程" scheme="http://blog.zeyu0633.com/categories/%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Javar必知必会" scheme="http://blog.zeyu0633.com/tags/Javar%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>有的时候也做一个叫“产品”的梦</title>
    <link href="http://blog.zeyu0633.com/2017/03/26/APP-Index-A/"/>
    <id>http://blog.zeyu0633.com/2017/03/26/APP-Index-A/</id>
    <published>2017-03-26T15:58:27.000Z</published>
    <updated>2017-04-10T04:14:03.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="‘产品’诞生记"><a href="#‘产品’诞生记" class="headerlink" title="‘产品’诞生记"></a>‘产品’诞生记</h3><blockquote>
<p>从想法到实现<br>从服务器到客户端<br>从原型图到API<br>从数据库到UI展现<br>从算法到用户体验<br>ALL SELF<br>ta叫做Quick Quiz<br>捂脸..别打人..呦吼吼</p>
</blockquote>
<a id="more"></a>
<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><blockquote>
<p>在学校里，做过一个APP，叫做‘阅卷助手’，是一个扫描答题卡的工具，当然答题卡也是特制的，主要工作流程就是：设置答案-扫描-分析-生成结果。<br>现在我想对这个APP进行扩展</p>
</blockquote>
<h3 id="上几张图片看一下老APP的样子"><a href="#上几张图片看一下老APP的样子" class="headerlink" title="上几张图片看一下老APP的样子"></a>上几张图片看一下老APP的样子</h3><blockquote>
<p>点击图片查看</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-647eaa5bfbce4c71.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" width="200" height="400" alt="1"><br><img src="http://upload-images.jianshu.io/upload_images/4943424-f3f0c58e30775e97.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" width="200" height="400" alt="2"><br><img src="http://upload-images.jianshu.io/upload_images/4943424-49c45896b8de04fe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" width="200" height="400" alt="3"><br><img src="http://upload-images.jianshu.io/upload_images/4943424-9c2abea8bcbdf342.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" width="200" height="400" alt="4"></p>
<h3 id="扩展目标"><a href="#扩展目标" class="headerlink" title="扩展目标"></a>扩展目标</h3><blockquote>
<p>还没整理好。。。</p>
</blockquote>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><blockquote>
<p>工欲善其事，必先利其器</p>
<ul>
<li>IntelliJ IDEA，服务器开发</li>
<li>Android Studio，客户端开发（先只开发Android）</li>
<li>墨刀，原型图</li>
<li>Sketch，UI图</li>
<li>Navicat for MySQL，数据库操作</li>
</ul>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;‘产品’诞生记&quot;&gt;&lt;a href=&quot;#‘产品’诞生记&quot; class=&quot;headerlink&quot; title=&quot;‘产品’诞生记&quot;&gt;&lt;/a&gt;‘产品’诞生记&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从想法到实现&lt;br&gt;从服务器到客户端&lt;br&gt;从原型图到API&lt;br&gt;从数据库到UI展现&lt;br&gt;从算法到用户体验&lt;br&gt;ALL SELF&lt;br&gt;ta叫做Quick Quiz&lt;br&gt;捂脸..别打人..呦吼吼&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Quick Quiz" scheme="http://blog.zeyu0633.com/categories/Quick-Quiz/"/>
    
    
      <category term="全栈" scheme="http://blog.zeyu0633.com/tags/%E5%85%A8%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>Http协议 &amp;&amp; Session &amp;&amp; Cookie</title>
    <link href="http://blog.zeyu0633.com/2017/03/21/http-http/"/>
    <id>http://blog.zeyu0633.com/2017/03/21/http-http/</id>
    <published>2017-03-21T15:00:00.000Z</published>
    <updated>2017-03-30T15:08:15.829Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要内容</p>
<ul>
<li>铺垫一下http协议的内容</li>
<li>对于cookie和session，结合实际代码，观察客户端和服务端的表现</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>HTTP是一个客户端和服务器端请求和响应的标准TCP。其实建立在TCP之上的。<br>那HTTP协议呢？HTTP协议（HyperText Transfer Protocol）,即超文本传输协议是用于服务器传输到客户端浏览器的传输协议。Web上，服务器和客户端利用HTTP协议进行通信会话。有OOP思想的得出结论：其会话的结构是一个简单的请求/响应序列，即浏览器发出请求和服务器做出响应。</p>
</blockquote>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>既然HTTP是基于传输层的TCP协议，而TCP协议是面向连接的端到端的协议。因此，使用HTTP协议传输前，首先建立TCP连接，就是因此在谈的TCP链接过程的“三次握手”。如图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-243a015df2090079.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="三次握手"></p>
<p>在Web上，HTTP协议使用TCP协议而不是UDP协议的原因在于一个网页必须传送很多数据，而且保证其完整性。TCP协议提供传输控制，按顺序组织数据和错误纠正的一系列功能。<br>一次HTTP操作称为一个事务，其工作过程可分为四步：</p>
<blockquote>
<p>1、客户端与服务器需要建立连接。（比如某个超级链接，HTTP就开始了。）<br>2、建立连接后，发送请求。<br>3、服务器接到请求后，响应其响应信息。<br>4、客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。</p>
</blockquote>
<p>建立连接，其实建立在TCP连接基础之上。图解核心工作过程（即省去连接过程）如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-387f993533270d62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="链接"></p>
<h3 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h3><p>HTTP报文由从客户机到服务器的请求和从服务器到客户机的响应构成。<br>请求报文格式如下：</p>
<blockquote>
<p>请求行 通用信息头 请求头 实体头 （空行） 报文主体</p>
</blockquote>
<p>详解：</p>
<blockquote>
<p>1、请求行 方法字段 + URL + Http协议版本<br>2、通用信息头 Cache-Control头域：指定请求和响应遵循的缓存机制。 keep-alive 是其连接持续有效【在下面百度的例子，会得到验证】<br>3、请求头 Host头域，脑补吧 Referer头域：允许客户端指定请求URL的资源地址。 User-Agent头域：请求用户信息。【可以看出一些客户端浏览器的内核信息】<br>4、报文主体，一般来说，请求主体少不了请求参数。</p>
</blockquote>
<p>应答报文格式如下：</p>
<blockquote>
<p>状态行 通用信息头 响应头 实体头 （空行） 报文主体</p>
</blockquote>
<p>详解：</p>
<blockquote>
<p>1、状态行 HTTP协议版本 + 状态码 + 状态代码的文本描述 【比如，200 代表请求成功】<br>2、通用信息头 keep-alive 是其连接持续有效，Date头域：时间描述<br>3、响应头 Server头：处理请求的原始服务器的软件信息。<br>4、实体头 Content-Type头：便是接收方实体的介质类型。（这也表示了你的报文主体是什么。） （空行）<br>5、报文主体 这里就是HTML响应页面了，在response中可查看。</p>
</blockquote>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="cookie概述"><a href="#cookie概述" class="headerlink" title="cookie概述"></a>cookie概述</h3><blockquote>
<ul>
<li>Cookie是请求头域和响应头域的字段。简单地说，就是伴随请求和响应的一组键值对的文本，小文本。所以称之为”Cookie“饼干。Cookie的生命来源于服务器。首先是客户端请求服务端，此时请求为第一次，无Cookie参数。这时候，服务端setCookie发送给客户端。记住，Cookie来源自服务端。</li>
<li>Cookie来源自服务端，当然服务于客户。就像你我的会话，文字是在我们之间传递的。所以Cookie用于服务端和客户端的会话。因为Http协议是无状态的，Cookie就是维持会话，说白了就是传递数据的额外媒介。</li>
</ul>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-bdfd65c9acd0ef3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cookie传输过程"></p>
<h3 id="以一个栗子说明上图各个步骤"><a href="#以一个栗子说明上图各个步骤" class="headerlink" title="以一个栗子说明上图各个步骤"></a>以一个栗子说明上图各个步骤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.htime.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by HTime on 2017/3/20.</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieController</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/cookie"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 获取客户端Cookie</span></div><div class="line">        Cookie[] cookies = req.getCookies();</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != cookies) &#123;</div><div class="line">            <span class="keyword">for</span> (Cookie cookie : cookies)</div><div class="line">                System.out.println(cookie.getName() + <span class="string">"-"</span> + cookie.getValue());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 创建Cookie</span></div><div class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"CookieName"</span>, <span class="string">"Htime"</span>);</div><div class="line">        cookie.setMaxAge(<span class="number">10</span>);</div><div class="line">        cookie.setHttpOnly(<span class="keyword">true</span>);</div><div class="line">        resp.addCookie(cookie);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello cookie!"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>第一次访问时，在请求头中是不会携带服务端的cookie的</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-0c4af19de2ad7b8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一次访问请求头"></p>
<blockquote>
<p>访问成功之后，我们可以在响应头中，看到服务端写入的cookie，所以，cookie是服务端的产物！！！！</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-dcd1b4ba9b43c0c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一次访问响应头"></p>
<blockquote>
<p>当服务器接收到cookie之后，会自己保存起来，用于下次访问使用，当对同一url再一次请求时，可以在请求头中看到cookie</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-379a977aa79d8840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第二次访问请求头"></p>
<blockquote>
<p>在IDEA的控制台中，可以看到将cookie打印出来了，说明cookie成功传到了服务端</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-833935155a4ea426.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台"></p>
<blockquote>
<p>cookie是http协议中的一种会话机制，明白了cookie的传输历程，也就明白什么事cookie啦</p>
</blockquote>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>Session代表着服务器和客户端一次会话的过程。直到session失效（服务端关闭），或者客户端关闭时结束。<br>Session 是存储在服务端的，并针对每个客户端（客户），通过SessionID来区别不同用户的。Session是以Cookie技术或URL重写实现。默认以Cookie技术实现，服务端会给这次会话创造一个JSESSIONID的Cookie值。</p>
</blockquote>
<h3 id="详解session作用过程"><a href="#详解session作用过程" class="headerlink" title="详解session作用过程"></a>详解session作用过程</h3><p><img src="http://upload-images.jianshu.io/upload_images/4943424-7c3a2a67fc8f5536.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="session作用过程"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.htime.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by HTime on 2017/3/21.</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionByCookieController</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/sessionInCookie"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sessionInCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//获取session</span></div><div class="line">        HttpSession session = req.getSession();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (session.isNew()) &#123;</div><div class="line">            <span class="comment">// 设置session属性值</span></div><div class="line">            session.setAttribute(<span class="string">"SessionName"</span>, <span class="string">"Htime"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 获取SessionId</span></div><div class="line">        String sessionId = session.getId();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (session.isNew()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"第一次请求,sessionId = "</span> + sessionId;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"第二次请求,sessionId = "</span> + sessionId + <span class="string">" sessionName = "</span> + session.getAttribute(<span class="string">"SessionName"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>第一次访问时，服务端会先新建一个session，然后将属性值放进去，此时，这时候，我们不用再把session通过cookie技术处理，容器帮我们处理了。<br>浏览器中会打印出第一次请求，并将sessionId打印出来，并执行了set-cookie</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-13287b686e470485.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="session第一次访问"></p>
<blockquote>
<p>第二次访问，服务端会从请求中获取session对象，容器会帮你根据Cookie找到唯一的session对象。<br>浏览器中不仅打印出啦sessionId，也打印出啦属性值，并且没有执行set-cookie</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4943424-603699e495a9b95f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="session第二次访问"></p>
<h2 id="HTTP协议知识补充"><a href="#HTTP协议知识补充" class="headerlink" title="HTTP协议知识补充"></a>HTTP协议知识补充</h2><h3 id="请求报文相关：请求行-请求方法"><a href="#请求报文相关：请求行-请求方法" class="headerlink" title="请求报文相关：请求行-请求方法"></a>请求报文相关：请求行-请求方法</h3><blockquote>
<p>GET            请求获取Request-URI所标识的资源<br>POST          在Request-URI所标识的资源后附加新的数据<br>HEAD         请求获取由Request-URI所标识的资源的响应消息报头<br>PUT            请求服务器存储一个资源，并用Request-URI作为其标识<br>DELETE       请求服务器删除Request-URI所标识的资源<br>TRACE        请求服务器回送收到的请求信息，主要用于测试或诊断<br>CONNECT  保留将来使用<br>OPTIONS   请求查询服务器的性能，或者查询与资源相关的选项和需求</p>
</blockquote>
<h3 id="响应报文相关：响应行-状态码"><a href="#响应报文相关：响应行-状态码" class="headerlink" title="响应报文相关：响应行-状态码"></a>响应报文相关：响应行-状态码</h3><blockquote>
<p>1xx：指示信息–表示请求已接收，继续处理<br>2xx：成功–表示请求已被成功接收、理解、接受<br>3xx：重定向–要完成请求必须进行更进一步的操作<br>4xx：客户端错误–请求有语法错误或请求无法实现<br>5xx：服务器端错误–服务器未能实现合法的请求</p>
</blockquote>
<h3 id="常见的状态码"><a href="#常见的状态码" class="headerlink" title="常见的状态码"></a>常见的状态码</h3><blockquote>
<p>200 OK 请求成功（其后是对GET和POST请求的应答文档。）<br>304 Not Modified 未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。<br>404 Not Found 服务器无法找到被请求的页面。<br>500 Internal Server Error 请求未完成。服务器遇到不可预知的情况。</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;铺垫一下http协议的内容&lt;/li&gt;
&lt;li&gt;对于cookie和session，结合实际代码，观察客户端和服务端的表现&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://blog.zeyu0633.com/categories/HTTP/"/>
    
    
      <category term="Javar必知必会" scheme="http://blog.zeyu0633.com/tags/Javar%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 存储过程</title>
    <link href="http://blog.zeyu0633.com/2017/03/16/mysql-process/"/>
    <id>http://blog.zeyu0633.com/2017/03/16/mysql-process/</id>
    <published>2017-03-16T12:00:00.000Z</published>
    <updated>2017-03-30T05:23:52.239Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>列几个最近写了用到的栗子</p>
</blockquote>
<a id="more"></a>
<blockquote>
<ul>
<li>对数据表进行分表，写的一个分表的过程</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">CREATE procedure create_table()</div><div class="line">BEGIN</div><div class="line">DECLARE `@i` int(20);</div><div class="line">DECLARE `@sqlstr` varchar(4096);</div><div class="line">SET `@i`=0;</div><div class="line">WHILE `@i` &lt; 512 DO</div><div class="line"></div><div class="line">SET @sqlstr = CONCAT(</div><div class="line">"CREATE TABLE post_push_",</div><div class="line">`@i`,</div><div class="line"></div><div class="line">"(</div><div class="line">  `id` bigint(20) NOT NULL,</div><div class="line">  `uid` bigint(20) NOT NULL,</div><div class="line">  `uid_follower` bigint(20) NOT NULL,</div><div class="line">  `pid` bigint(20) NOT NULL,</div><div class="line">  `postTime` datetime DEFAULT NULL,</div><div class="line">  `addTime` datetime DEFAULT NULL,</div><div class="line">  PRIMARY KEY (`id`, `uid`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4"</div><div class="line"></div><div class="line">);</div><div class="line">prepare stmt from @sqlstr;</div><div class="line">execute stmt;</div><div class="line"></div><div class="line">SET `@i` = `@i` + 1;</div><div class="line">END WHILE;</div><div class="line">END;</div><div class="line">call create_table();</div><div class="line">drop procedure create_table;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>分表之后，后台还没写好，但是接口已经给出去啦，为了方便调试和验证，需要造一些数据，然后写了一个过程</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">DROP PROCEDURE if exists create_data_for_msg;</div><div class="line"></div><div class="line">DELIMITER ;; </div><div class="line">CREATE procedure create_data_for_msg()</div><div class="line">BEGIN</div><div class="line">DECLARE `@i` int(20);</div><div class="line">DECLARE `@tout` int(20);</div><div class="line">DECLARE `@tin` int(20);</div><div class="line">DECLARE `@u` int(20);</div><div class="line">DECLARE `@gid` int(20);</div><div class="line">DECLARE `@sqlstr` varchar(4096);</div><div class="line">SET `@u`=9202532;</div><div class="line">SET `@i`=`@u`%512;</div><div class="line">SET `@tout`=0;</div><div class="line">SET `@tin`=0;</div><div class="line"></div><div class="line">WHILE `@tout` &lt; 200 DO</div><div class="line"></div><div class="line">SET `@gid` = 1047 + `@tout`;</div><div class="line"></div><div class="line">SET @sqlstr = CONCAT(</div><div class="line">"INSERT INTO user_msg_group_",`@i`,"( `uid`, `gid`, `des`, `groupType`, `status`, `createDate`, `updateTime`) VALUES",</div><div class="line">   "(",`@u`,", ",`@gid`,", 123, 5, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000) ON DUPLICATE KEY UPDATE `updateTime` = unix_timestamp(SYSDATE()) * 1000;");</div><div class="line"></div><div class="line">PREPARE stmt FROM @sqlstr;</div><div class="line">execute stmt;</div><div class="line"></div><div class="line">SET @sqlstr = CONCAT(</div><div class="line">"INSERT INTO user_msg_",`@i`,"( `uid`, `gid`, `groupType`, `msgType`, `data`, `style`, `status`, `createDate`, `updateTime`) VALUES",</div><div class="line">   "(",`@u`,", ",`@gid`,", 5, 5001, '261', 101, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">    (",`@u`,", ",`@gid`,", 5, 5001, '2', 101, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '3', 101, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '48', 102, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '86', 102, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '51', 103, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '263', 103, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '94', 104, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '95', 105, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '39', 201, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '42', 201, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '43', 201, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '52', 201, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '53', 202, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '222', 202, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '1184', 202, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000),</div><div class="line">	(",`@u`,", ",`@gid`,", 5, 5001, '54', 203, 0, sysDate(), unix_timestamp(SYSDATE()) * 1000);"</div><div class="line"></div><div class="line">);</div><div class="line"></div><div class="line">WHILE `@tin` &lt; 20 DO</div><div class="line">PREPARE stmt FROM @sqlstr;</div><div class="line">execute stmt;</div><div class="line">SET `@tin` = `@tin` + 1;</div><div class="line">END WHILE;</div><div class="line"></div><div class="line">SET `@tin`=0;</div><div class="line"></div><div class="line">SET `@tout` = `@tout` + 1;</div><div class="line">END WHILE;</div><div class="line">END;</div><div class="line">call create_data_for_msg();</div><div class="line">drop procedure create_data_for_msg;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>发一个有关送奖品拉新的活动，需要将不同的奖品散列到不同时间段里，写了一个过程</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">DROP PROCEDURE if exists award_pool_insert_prc;</div><div class="line"></div><div class="line">DELIMITER ;;  </div><div class="line">CREATE PROCEDURE award_pool_insert_prc ()  </div><div class="line">BEGIN  </div><div class="line">  </div><div class="line">DECLARE i INT DEFAULT 1;</div><div class="line">  </div><div class="line">##iPhone 7 35  1个</div><div class="line">WHILE i&lt;=1 </div><div class="line">DO  </div><div class="line">	insert into btime_event.award_record_pool ( uuid, awID, status, activeTime, createTime) values( REPLACE(uuid(), '-',''), 35, 0, DATE_ADD('2016-12-26 06:00:00',  INTERVAL  FLOOR(1 + (RAND() * 64800))   SECOND ) ,  now());</div><div class="line">	commit;</div><div class="line">	SET i=i+1;  </div><div class="line">END WHILE ; </div><div class="line">SELECT 'awID: 35  inited' ;</div><div class="line"></div><div class="line">##儿童手表 36 5个 </div><div class="line">SET i=1; </div><div class="line">WHILE i&lt;=1 </div><div class="line">DO  </div><div class="line">	insert into btime_event.award_record_pool ( uuid, awID, status, activeTime, createTime) values( REPLACE(uuid(), '-',''), 36, 0, DATE_ADD('2016-12-19 06:00:00',  INTERVAL  FLOOR(1 + (RAND() * 64800 ))   SECOND ) ,  now());</div><div class="line">	insert into btime_event.award_record_pool ( uuid, awID, status, activeTime, createTime) values( REPLACE(uuid(), '-',''), 36, 0, DATE_ADD('2016-12-20 06:00:00',  INTERVAL  FLOOR(1 + (RAND() * 64800 ))   SECOND ) ,  now());</div><div class="line">	insert into btime_event.award_record_pool ( uuid, awID, status, activeTime, createTime) values( REPLACE(uuid(), '-',''), 36, 0, DATE_ADD('2016-12-21 06:00:00',  INTERVAL  FLOOR(1 + (RAND() * 64800 ))   SECOND ) ,  now());</div><div class="line">	insert into btime_event.award_record_pool ( uuid, awID, status, activeTime, createTime) values( REPLACE(uuid(), '-',''), 36, 0, DATE_ADD('2016-12-22 06:00:00',  INTERVAL  FLOOR(1 + (RAND() * 64800 ))   SECOND ) ,  now());</div><div class="line">	insert into btime_event.award_record_pool ( uuid, awID, status, activeTime, createTime) values( REPLACE(uuid(), '-',''), 36, 0, DATE_ADD('2016-12-23 06:00:00',  INTERVAL  FLOOR(1 + (RAND() * 64800 ))   SECOND ) ,  now());</div><div class="line">	SET i=i+1;  </div><div class="line">END WHILE ; </div><div class="line">commit;</div><div class="line">SELECT 'awID: 36  inited' ;</div><div class="line"></div><div class="line">END;;</div><div class="line">  </div><div class="line">CALL award_pool_insert_prc();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;列几个最近写了用到的栗子&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://blog.zeyu0633.com/categories/Mysql/"/>
    
    
      <category term="Javar必知必会" scheme="http://blog.zeyu0633.com/tags/Javar%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 基础</title>
    <link href="http://blog.zeyu0633.com/2017/03/15/mysql-basic/"/>
    <id>http://blog.zeyu0633.com/2017/03/15/mysql-basic/</id>
    <published>2017-03-15T15:00:00.000Z</published>
    <updated>2017-03-30T15:07:16.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><blockquote>
<p>最近看了《MySQL 存储过程编程》这本书，再结合在慕课网上的《与MySQL的零距离接触》教程，记录一下</p>
</blockquote>
<a id="more"></a>
<h3 id="还没有写呢"><a href="#还没有写呢" class="headerlink" title="还没有写呢"></a>还没有写呢</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最近看了《MySQL 存储过程编程》这本书，再结合在慕课网上的《与MySQL的零距离接触》教程，记录一下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://blog.zeyu0633.com/categories/Mysql/"/>
    
    
      <category term="Javar必知必会" scheme="http://blog.zeyu0633.com/tags/Javar%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 优化</title>
    <link href="http://blog.zeyu0633.com/2017/03/15/mysql-better/"/>
    <id>http://blog.zeyu0633.com/2017/03/15/mysql-better/</id>
    <published>2017-03-15T12:00:00.000Z</published>
    <updated>2017-03-30T15:07:16.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><blockquote>
<p>最近看了《MySQL 存储过程编程》这本书，再结合在慕课网上的《与MySQL的零距离接触》教程，记录一下</p>
</blockquote>
<a id="more"></a>
<h3 id="还没有写呢"><a href="#还没有写呢" class="headerlink" title="还没有写呢"></a>还没有写呢</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最近看了《MySQL 存储过程编程》这本书，再结合在慕课网上的《与MySQL的零距离接触》教程，记录一下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://blog.zeyu0633.com/categories/Mysql/"/>
    
    
      <category term="Javar必知必会" scheme="http://blog.zeyu0633.com/tags/Javar%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式 Java</title>
    <link href="http://blog.zeyu0633.com/2017/03/12/ze-java/"/>
    <id>http://blog.zeyu0633.com/2017/03/12/ze-java/</id>
    <published>2017-03-12T08:00:00.000Z</published>
    <updated>2017-03-30T15:09:36.144Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式介绍"><a href="#正则表达式介绍" class="headerlink" title="正则表达式介绍"></a>正则表达式介绍</h3><blockquote>
<p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p>
</blockquote>
<a id="more"></a>
<h3 id="java-util-regex"><a href="#java-util-regex" class="headerlink" title="java.util.regex"></a>java.util.regex</h3><blockquote>
<ul>
<li>Pattern 类：pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</li>
<li>Matcher 类：Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</li>
<li>PatternSyntaxException：PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</li>
</ul>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><blockquote>
<ul>
<li><p>正则表达式实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.*;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegexExample1</span></span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">      String content = <span class="string">"I am noob "</span> +</div><div class="line">        <span class="string">"from runoob.com."</span>;</div><div class="line"> </div><div class="line">      String pattern = <span class="string">".*runoob.*"</span>;</div><div class="line"> </div><div class="line">      <span class="keyword">boolean</span> isMatch = Pattern.matches(pattern, content);</div><div class="line">      System.out.println(<span class="string">"字符串中是否包含了 'runoob' 子字符串? "</span> + isMatch);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>捕获组</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexMatches</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</div><div class="line"> </div><div class="line">      <span class="comment">// 按指定模式在字符串查找</span></div><div class="line">      String line = <span class="string">"This order was placed for QT3000! OK?"</span>;</div><div class="line">      String pattern = <span class="string">"(\\D*)(\\d+)(.*)"</span>;</div><div class="line"> </div><div class="line">      <span class="comment">// 创建 Pattern 对象</span></div><div class="line">      Pattern r = Pattern.compile(pattern);</div><div class="line"> </div><div class="line">      <span class="comment">// 现在创建 matcher 对象</span></div><div class="line">      Matcher m = r.matcher(line);</div><div class="line">      <span class="keyword">if</span> (m.find( )) &#123;</div><div class="line">         System.out.println(<span class="string">"Found value: "</span> + m.group(<span class="number">0</span>) );</div><div class="line">         System.out.println(<span class="string">"Found value: "</span> + m.group(<span class="number">1</span>) );</div><div class="line">         System.out.println(<span class="string">"Found value: "</span> + m.group(<span class="number">2</span>) );</div><div class="line">         System.out.println(<span class="string">"Found value: "</span> + m.group(<span class="number">3</span>) ); </div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">         System.out.println(<span class="string">"NO MATCH"</span>);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>start 和 end 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexMatches</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">"\\bcat\\b"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT =</div><div class="line">                                    <span class="string">"cat cat cat cattie cat"</span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</div><div class="line">       Pattern p = Pattern.compile(REGEX);</div><div class="line">       Matcher m = p.matcher(INPUT); <span class="comment">// 获取 matcher 对象</span></div><div class="line">       <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"> </div><div class="line">       <span class="keyword">while</span>(m.find()) &#123;</div><div class="line">         count++;</div><div class="line">         System.out.println(<span class="string">"Match number "</span>+count);</div><div class="line">         System.out.println(<span class="string">"start(): "</span>+m.start());</div><div class="line">         System.out.println(<span class="string">"end(): "</span>+m.end());</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>matches 和 lookingAt 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexMatches</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">"foo"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT = <span class="string">"fooooooooooooooooo"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern pattern;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Matcher matcher;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</div><div class="line">       pattern = Pattern.compile(REGEX);</div><div class="line">       matcher = pattern.matcher(INPUT);</div><div class="line"> </div><div class="line">       System.out.println(<span class="string">"Current REGEX is: "</span>+REGEX);</div><div class="line">       System.out.println(<span class="string">"Current INPUT is: "</span>+INPUT);</div><div class="line"> </div><div class="line">       System.out.println(<span class="string">"lookingAt(): "</span>+matcher.lookingAt());</div><div class="line">       System.out.println(<span class="string">"matches(): "</span>+matcher.matches());</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>replaceFirst 和 replaceAll 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexMatches</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String REGEX = <span class="string">"dog"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String INPUT = <span class="string">"The dog says meow. "</span> +</div><div class="line">                                    <span class="string">"All dogs say meow."</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String REPLACE = <span class="string">"cat"</span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       Pattern p = Pattern.compile(REGEX);</div><div class="line">       <span class="comment">// get a matcher object</span></div><div class="line">       Matcher m = p.matcher(INPUT); </div><div class="line">       INPUT = m.replaceAll(REPLACE);</div><div class="line">       System.out.println(INPUT);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>appendReplacement 和 appendTail 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexMatches</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String REGEX = <span class="string">"a*b"</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String INPUT = <span class="string">"aabfooaabfooabfoob"</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String REPLACE = <span class="string">"-"</span>;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      Pattern p = Pattern.compile(REGEX);</div><div class="line">      <span class="comment">// 获取 matcher 对象</span></div><div class="line">      Matcher m = p.matcher(INPUT);</div><div class="line">      StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">      <span class="keyword">while</span>(m.find())&#123;</div><div class="line">         m.appendReplacement(sb,REPLACE);</div><div class="line">      &#125;</div><div class="line">      m.appendTail(sb);</div><div class="line">      System.out.println(sb.toString());</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则表达式介绍&quot;&gt;&lt;a href=&quot;#正则表达式介绍&quot; class=&quot;headerlink&quot; title=&quot;正则表达式介绍&quot;&gt;&lt;/a&gt;正则表达式介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="正则表达式" scheme="http://blog.zeyu0633.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="Javar必知必会" scheme="http://blog.zeyu0633.com/tags/Javar%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式 实践</title>
    <link href="http://blog.zeyu0633.com/2017/03/12/ze-practices/"/>
    <id>http://blog.zeyu0633.com/2017/03/12/ze-practices/</id>
    <published>2017-03-12T07:00:00.000Z</published>
    <updated>2017-03-30T15:09:36.114Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式介绍"><a href="#正则表达式介绍" class="headerlink" title="正则表达式介绍"></a>正则表达式介绍</h3><blockquote>
<p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p>
</blockquote>
<a id="more"></a>
<h2 id="常用知识点详解"><a href="#常用知识点详解" class="headerlink" title="常用知识点详解"></a>常用知识点详解</h2><h3 id="匹配汉字或中文"><a href="#匹配汉字或中文" class="headerlink" title="匹配汉字或中文"></a>匹配汉字或中文</h3><blockquote>
<p>正则匹配中文汉字根据页面编码不同而略有区别：<br>GBK/GB2312编码：[x80-xff&gt;]+ 或 [xa1-xff]+<br>UTF-8编码：[x{4e00}-x{9fa5}]+/u</p>
</blockquote>
<h3 id="匹配身份证号码"><a href="#匹配身份证号码" class="headerlink" title="匹配身份证号码"></a>匹配身份证号码</h3><blockquote>
<p>身份证为15位或者18位，15位的全为数字，18位的前17位为数字，最后一位为数字或者大写字母”X“。<br>与之匹配的正则表达式：(^\d{15}$)|(^\d{17}([0-9]|X)$)</p>
</blockquote>
<h3 id="匹配电子邮箱"><a href="#匹配电子邮箱" class="headerlink" title="匹配电子邮箱"></a>匹配电子邮箱</h3><blockquote>
<p>正则匹配表达式：/^<a href="[a-z0-9]*[-_]?[a-z0-9]+">a-z</a><em>@([a-z0-9]</em>[-<em>]?[a-z0-9]+)+[.][a-z]{2,3}([.][a-z]{2})?$/i<br>说明：<br>①/内容/i 构成一个不区分大小写的正则表达式；^ 匹配开始；$ 匹配结束。<br>②[a-z] E-Mail前缀必需是一个英文字母开头<br>③([a-z0-9]*[-</em>]?[a-z0-9]+)<em> 和_a_2、aaa11、_1_a<em>2匹配，和a1</em>、aaff<em>33a</em>、a__aa不匹配，如果是空字符，也是匹配的，</em>表示0个或者多个。<br>④<em>表示0个或多个前面的字符.<br>⑤[a-z0-9]</em> 匹配0个或多个英文字母或者数字；[-<em>]? 匹配0个或1“-”，因为“-”不能连续出现。<br>⑥[a-z0-9]+ 匹配1个或多个英文字母或者数字，因为“-”不能做为结尾<br>⑦@ 必需有个有@<br>⑧([a-z0-9]*[-</em>]?[a-z0-9]+)+ 见上面([a-z0-9]<em>[-_]?[a-z0-9]+)</em>解释，但是不能为空，+表示一个或者为多个。<br>⑨[.] 将特殊字符(.)当成普通字符；[a-z]{2,3} 匹配2个至3个英文字母，一般为com或者net等。<br>⑩([.][a-z]{2})? 匹配0个或者1个[.][a-z]{2}(比如.cn等) 我不知道一般.com.cn最后部份是不是都是两位的,如果不是请修改{2}为{起始字数,结束字数} </p>
</blockquote>
<h3 id="匹配用户密码"><a href="#匹配用户密码" class="headerlink" title="匹配用户密码"></a>匹配用户密码</h3><blockquote>
<p>密码形式可以根据开发需求自己设定，下面是几个匹配密码的例子：</p>
</blockquote>
<p>正则表达式： ^[a-zA-Z]\w{5,17}$<br>匹配：       以字母开头，长度在6~18之间，只能包含字符、数字和下划线<br>不匹配：     </p>
<p>正则表达式： [^A-Za-z0-9]<br>匹配：       !@#$ | %^&amp;* | ‘&gt;&lt;?.,&quot;<br>不匹配：     ABC123abc | abc123ABC | abc0132ABC</p>
<p>正则表达式： (?-i)(?=^.{8,}$)((?!.<em>\s)(?=.</em>[A-Z])(?=.<em>[a-z]))(?=(1)(?=.</em>\d)|.<em>[^A-Za-z0-9])^.</em>$<br>匹配：       a3dAbed. | P@ssword1 | aB_1bbbb | myPassw0rd!<br>不匹配：     password | password12 | password__12 | p@ssw0rd</p>
<h3 id="匹配日期时间"><a href="#匹配日期时间" class="headerlink" title="匹配日期时间"></a>匹配日期时间</h3><p>正则表达式： (\d{2}|\d{4})(?:-)?([0]{1}\d{1}|[1]{1}[0-2]{1})(?:-)?([0-2]{1}\d{1}|[3]{1}[0-1]{1})(?:\s)?([0-1]{1}\d{1}|[2]{1}[0-3]{1})(?::)?([0-5]{1}\d{1})(?::)?([0-5]{1}\d{1})<br>匹配：       00-00-00 00:00:00 | 0000-00-00 00:00:00 | 09-05-22 08:16:00 | 1970-00-00 00:00:00 | 20090522081600<br>不匹配：   2009-13:01 00:00:00 | 2009-12-32 00:00:00 | 2002-12-31 24:00:00 | 2002-12-31 23:60:00 | 02-12-31 23:00:60</p>
<p>正则表达式： ^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$<br>匹配：       2004-04-30 | 2004-02-29<br>不匹配：     2004-04-31 | 2004-02-30</p>
<p>正则表达式： ^([1-9]|1[0-2]|0[1-9]){1}(:[0-5][0-9][aApP][mM]){1}$<br>匹配：       08:00AM | 10:00am | 7:00pm<br>不匹配：     13:00pm | 12:65am</p>
<p>正则表达式： ^(([1-9])|(0[1-9])|(1[0-2]))\/(([0-9])|([0-2][0-9])|(3[0-1]))\/(([0-9][0-9])|([1-2][0,9][0-9][0-9]))$<br>匹配：       01/01/2001 | 1/1/1999 | 10/20/2080<br>不匹配：     13/01/2001 | 1/1/1800 | 10/32/2080</p>
<h3 id="匹配电话号码"><a href="#匹配电话号码" class="headerlink" title="匹配电话号码"></a>匹配电话号码</h3><p>正则表达式： \d{3}-\d{8}|\d{4}-\d{7}<br>匹配：       0511-4405222 | 021-87888822<br>不匹配：     02-552255 12345-784787</p>
<p>正则表达式： (^([0]\d{2}|\d{4}))(\d{6,7}$)<br>匹配：       (021)1234567 | (0411)123456 | (000)000000<br>不匹配：     (123)1234567 | 025123456 | 0252345678</p>
<p>正则表达式： ^(?<national>+?(?:86)?)(?<separator>\s?-?)(?<phone>(?<vender>(13|15|18)[0-9])(?<area>\d{4})(?<id>\d{4}))$<br>匹配：       +8613012345678 | 86 13012345678 | 13245679087<br>不匹配：     +86130123456781231434352 | 13560012513 | ++8613012345678</id></vender></phone></separator></national></p>
<h3 id="匹配字母"><a href="#匹配字母" class="headerlink" title="匹配字母"></a>匹配字母</h3><p>匹配特定字符串：<br>只能输入长度为3的字符：”^.{3}$”。<br>只能输入由26个英文字母组成的字符串：”^[A-Za-z]+$”。<br>只能输入由26个大写英文字母组成的字符串：”^[A-Z]+$”。<br>只能输入由26个小写英文字母组成的字符串：”^[a-z]+$”。<br>只能输入由数字和26个英文字母组成的字符串：”^[A-Za-z0-9]+$”。<br>只能输入由数字、26个英文字母或者下划线组成的字符串：”^\w+$”。</p>
<h3 id="常用正则表达式大全"><a href="#常用正则表达式大全" class="headerlink" title="常用正则表达式大全"></a>常用正则表达式大全</h3><p>部分匹配规则预览：<br>中国电话号码验证<br>匹配形式如:0511-4405222 或者021-87888822 或者 021-44055520-555 或者 (0511)4405222<br>正则表达式 “((d{3,4})|d{3,4}-)?d{7,8}(-d{3})*”</p>
<p>中国邮政编码验证<br>匹配形式如:215421<br>正则表达式 “d{6}”</p>
<p>电子邮件验证<br>匹配形式如:justali@justdn.com<br>正则表达式 “w+([-+.]w+)<em>@w+([-.]w+)</em>.w+([-.]w+)*”</p>
<p>身份证验证<br>匹配形式如:15位或者18位身份证<br>正则表达式 “d{18}|d{15}”</p>
<p>常用数字验证<br>正则表达式<br>“d{n}” n为规定长度<br>“d{n,m}” n到m的长度范围</p>
<p>非法字符验证<br>匹配非法字符如:&lt; &gt; &amp; / ‘ |<br>正则表达式 [^&lt;&gt;&amp;/|’]+</p>
<p>日期验证<br>匹配形式如:20030718,030718<br>范围:1900–2099<br>正则表达式((((19){1}|(20){1})d{2})|d{2})[01]{1}d{1}[0-3]{1}d{1}<br>正则表达式是一个好东西，但是一般情况下，我们需要验证的内容少之又少。</p>
<h3 id="FOR-JAVA"><a href="#FOR-JAVA" class="headerlink" title="FOR JAVA"></a>FOR JAVA</h3><p>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。我是一名Javar！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则表达式介绍&quot;&gt;&lt;a href=&quot;#正则表达式介绍&quot; class=&quot;headerlink&quot; title=&quot;正则表达式介绍&quot;&gt;&lt;/a&gt;正则表达式介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="正则表达式" scheme="http://blog.zeyu0633.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="Javar必知必会" scheme="http://blog.zeyu0633.com/tags/Javar%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式 知识点</title>
    <link href="http://blog.zeyu0633.com/2017/03/12/ze-topics/"/>
    <id>http://blog.zeyu0633.com/2017/03/12/ze-topics/</id>
    <published>2017-03-12T04:00:00.000Z</published>
    <updated>2017-03-30T15:09:36.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式介绍"><a href="#正则表达式介绍" class="headerlink" title="正则表达式介绍"></a>正则表达式介绍</h3><blockquote>
<p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p>
</blockquote>
<a id="more"></a>
<h2 id="常用知识点详解"><a href="#常用知识点详解" class="headerlink" title="常用知识点详解"></a>常用知识点详解</h2><h3 id="元字符详解"><a href="#元字符详解" class="headerlink" title="元字符详解"></a>元字符详解</h3><h4 id="先来看几个栗子"><a href="#先来看几个栗子" class="headerlink" title="先来看几个栗子"></a>先来看几个栗子</h4><blockquote>
<ul>
<li><font color="#B22222">\ba\w<em>\b</em></font>匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w)，最后是单词结束处(\b)。</li>
<li><font color="#B22222">\d+</font>匹配1个或更多连续的数字。这里的+是和<em>类似的元字符，不同的是</em>匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。</li>
<li><font color="#B22222">\b\w{6}\b</font>匹配刚好6个字母/数字的单词。</li>
<li><font color="#B22222">\bhi\b.*\bLucy\b</font>匹配先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词。</li>
</ul>
</blockquote>
<h4 id="常用的元字符"><a href="#常用的元字符" class="headerlink" title="常用的元字符"></a>常用的元字符</h4><table>
<thead>
<tr>
<th>代码</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><font color="#0099ff">.</font><br></td>
<td style="text-align:center">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td><font color="#0099ff">\w</font><br></td>
<td style="text-align:center">匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td><font color="#0099ff">\s</font><br></td>
<td style="text-align:center">匹配任意的空白符</td>
</tr>
<tr>
<td><font color="#0099ff">\d</font><br></td>
<td style="text-align:center">匹配数字</td>
</tr>
<tr>
<td><font color="#0099ff">\b</font><br></td>
<td style="text-align:center">匹配单词的开始或结束</td>
</tr>
<tr>
<td><font color="#0099ff">^</font><br></td>
<td style="text-align:center">匹配字符串的开始</td>
</tr>
<tr>
<td><font color="#0099ff">$</font><br></td>
<td style="text-align:center">匹配字符串的结束</td>
</tr>
</tbody>
</table>
<h4 id="和"><a href="#和" class="headerlink" title="^和$"></a>^和$</h4><blockquote>
<p>元字符^（和数字6在同一个键位上的符号）和$都匹配一个位置，这和\b有点类似。^匹配你要用来查找的字符串的开头，$匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：^\d{5,12}$。<br> 这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。<br> 因为使用了^和$，所以输入的整个字符串都要用来和\d{5,12}来匹配，也就是说整个输入必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。</p>
</blockquote>
<h3 id="转义字符详解"><a href="#转义字符详解" class="headerlink" title="转义字符详解"></a>转义字符详解</h3><blockquote>
<p>尴尬，怎么查元字符本身呢？？<br>这时你就得使用<font color="#B22222"> \ </font><br>来取消这些字符的特殊意义。<br>你应该使用.和*。当然，要查找\本身，你也得用\。</p>
<ul>
<li><font color="#B22222">unibetter.com</font>匹配unibetter.com。</li>
<li><font color="#B22222">C:\Windows</font>匹配C:\Windows。</li>
</ul>
</blockquote>
<h3 id="重复匹配详解"><a href="#重复匹配详解" class="headerlink" title="重复匹配详解"></a>重复匹配详解</h3><blockquote>
<p>*,+,{2},{5,12}这几个匹配重复的方式上面已经有了</p>
</blockquote>
<h4 id="常用的限定符"><a href="#常用的限定符" class="headerlink" title="常用的限定符"></a>常用的限定符</h4><table>
<thead>
<tr>
<th>代码</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><font color="#0099ff">*</font><br></td>
<td style="text-align:center">重复零次或更多次</td>
</tr>
<tr>
<td><font color="#0099ff">+</font><br></td>
<td style="text-align:center">重复一次或更多次</td>
</tr>
<tr>
<td><font color="#0099ff">?</font><br></td>
<td style="text-align:center">重复零次或一次</td>
</tr>
<tr>
<td><font color="#0099ff">{n}</font><br></td>
<td style="text-align:center">重复n次</td>
</tr>
<tr>
<td><font color="#0099ff">{n,}</font><br></td>
<td style="text-align:center">重复n次或更多次</td>
</tr>
<tr>
<td><font color="#0099ff">{n,m}</font><br></td>
<td style="text-align:center">重复n到m次</td>
</tr>
</tbody>
</table>
<h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><blockquote>
<ul>
<li><font color="#B22222">Windows\d+</font>匹配Windows后面跟1个或更多数字。</li>
<li><font color="#B22222">^\w+</font>匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)。</li>
</ul>
</blockquote>
<h3 id="字符类详解"><a href="#字符类详解" class="headerlink" title="字符类详解"></a>字符类详解</h3><blockquote>
<p>“(”和“)”也是元字符，后面的分组节里会提到，所以在这里需要使用转义。<br>要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？</p>
</blockquote>
<h4 id="栗子-1"><a href="#栗子-1" class="headerlink" title="栗子"></a>栗子</h4><blockquote>
<ul>
<li><font color="#B22222">[aeiou]</font>匹配任何一个英文元音字母。</li>
<li><font color="#B22222">[.?!]</font>匹配标点符号(.或?或!)。</li>
<li><font color="#B22222">[0-9]</font>代表的含意与\d就是完全一致的：一位数字。</li>
<li><font color="#B22222">[a-z0-9A-Z_]</font>等同于\w（如果只考虑英文的话）。</li>
<li><font color="#B22222">(?0\d{2}[) -]?\d{8}</font>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。。</li>
</ul>
</blockquote>
<h3 id="分枝条件详解"><a href="#分枝条件详解" class="headerlink" title="分枝条件详解"></a>分枝条件详解</h3><blockquote>
<p>不幸的是，刚才那个表达式也能匹配010)12345678或(022-87654321这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。听不明白？没关系，看例子：</p>
</blockquote>
<h4 id="栗子-2"><a href="#栗子-2" class="headerlink" title="栗子"></a>栗子</h4><blockquote>
<ul>
<li><font color="#B22222">0\d{2}-\d{8}|0\d{3}-\d{7}</font>这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。</li>
<li><font color="#B22222">(0\d{2})[- ]?\d{8}|0\d{2}[- ]?\d{8}</font>这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。</li>
<li><font color="#B22222">\d{5}-\d{4}|\d{5}</font>这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：使用分枝条件时，要注意各个条件的顺序。如果你把它改成\d{5}|\d{5}-\d{4}的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</li>
</ul>
</blockquote>
<h3 id="分组详解"><a href="#分组详解" class="headerlink" title="分组详解"></a>分组详解</h3><blockquote>
<p>我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了</p>
</blockquote>
<h4 id="栗子-3"><a href="#栗子-3" class="headerlink" title="栗子"></a>栗子</h4><blockquote>
<ul>
<li><font color="#B22222">(\d{1,3}.){3}\d{1,3}</font>是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})。<br>不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能。</li>
<li><font color="#B22222">((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)</font>使用冗长的分组，选择，字符类来描述一个正确的IP地址。</li>
</ul>
</blockquote>
<h3 id="反义详解"><a href="#反义详解" class="headerlink" title="反义详解"></a>反义详解</h3><blockquote>
<p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义</p>
</blockquote>
<h4 id="常用的翻反义代码"><a href="#常用的翻反义代码" class="headerlink" title="常用的翻反义代码"></a>常用的翻反义代码</h4><table>
<thead>
<tr>
<th>代码</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><font color="#0099ff">\W</font><br></td>
<td style="text-align:center">匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td><font color="#0099ff">\S</font><br></td>
<td style="text-align:center">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td><font color="#0099ff">\D</font><br></td>
<td style="text-align:center">匹配任意非数字的字符</td>
</tr>
<tr>
<td><font color="#0099ff">\B</font><br></td>
<td style="text-align:center">匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td><font color="#0099ff">[^x]</font><br></td>
<td style="text-align:center">匹配除了x以外的任意字符</td>
</tr>
<tr>
<td><font color="#0099ff">[^aeiou]</font><br></td>
<td style="text-align:center">匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>
<h4 id="栗子-4"><a href="#栗子-4" class="headerlink" title="栗子"></a>栗子</h4><blockquote>
<ul>
<li><font color="#B22222">\S+</font>匹配不包含空白符的字符串。</li>
</ul>
</blockquote>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="-分割线-"></a>-分割线-</h3><h3 id="后向引用详解"><a href="#后向引用详解" class="headerlink" title="后向引用详解"></a>后向引用详解</h3><blockquote>
<p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：<br>从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。<br>后向引用用于重复搜索前面某个分组匹配的文本。例如：<br>\1：代表分组1匹配的文本。</p>
</blockquote>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote>
<ul>
<li><font color="#B22222">\b(\w+)\b\s+\1\b</font>可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。</li>
</ul>
</blockquote>
<h4 id="常用分组语法"><a href="#常用分组语法" class="headerlink" title="常用分组语法"></a>常用分组语法</h4><table>
<thead>
<tr>
<th>分类</th>
<th>代码</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>捕获</td>
<td></td>
<td style="text-align:center"><font color="#0099ff">(exp)</font><br></td>
<td>匹配exp,并捕获文本到自动命名的组里</td>
</tr>
<tr>
<td>捕获</td>
<td></td>
<td style="text-align:center"><font color="#0099ff">(?<name>exp)</name></font><br></td>
<td>匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td>
</tr>
<tr>
<td>捕获</td>
<td></td>
<td style="text-align:center"><font color="#0099ff">(?:exp)</font><br></td>
<td>匹配exp,不捕获匹配的文本，也不给此分组分配组号</td>
</tr>
<tr>
<td>零宽断言</td>
<td></td>
<td style="text-align:center"><font color="#0099ff">(?=exp)</font><br></td>
<td>匹配exp前面的位置</td>
</tr>
<tr>
<td>零宽断言</td>
<td></td>
<td style="text-align:center"><font color="#0099ff">(?&lt;=exp)</font><br></td>
<td>匹配exp后面的位置</td>
</tr>
<tr>
<td>零宽断言</td>
<td></td>
<td style="text-align:center"><font color="#0099ff">(?!exp)</font><br></td>
<td>匹配后面跟的不是exp的位置</td>
</tr>
<tr>
<td>零宽断言</td>
<td></td>
<td style="text-align:center"><font color="#0099ff">(?&lt;!exp)</font><br></td>
<td>匹配前面不是exp的位置</td>
</tr>
<tr>
<td>注释</td>
<td></td>
<td style="text-align:center"><font color="#0099ff">    (?#comment)</font><br></td>
<td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td>
</tr>
</tbody>
</table>
<h3 id="零宽断言详解"><a href="#零宽断言详解" class="headerlink" title="零宽断言详解"></a>零宽断言详解</h3><blockquote>
<p>断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。<br> 接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。</p>
</blockquote>
<h4 id="栗子-5"><a href="#栗子-5" class="headerlink" title="栗子"></a>栗子</h4><ul>
<li>(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I’m singing while you’re dancing.时，它会匹配sing和danc。</li>
<li>(?&lt;=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。</li>
<li>假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?&lt;=\d)\d{3})*\b，用它对1234567890进行查找时结果是234567890。</li>
<li>(?&lt;=\s)\d+(?=\s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)。</li>
</ul>
<h3 id="负向零宽断言详解"><a href="#负向零宽断言详解" class="headerlink" title="负向零宽断言详解"></a>负向零宽断言详解</h3><blockquote>
<p>负向零宽断言只匹配一个位置，并不消费任何字符。</p>
</blockquote>
<h4 id="栗子-6"><a href="#栗子-6" class="headerlink" title="栗子"></a>栗子</h4><ul>
<li>零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</li>
<li>(?&lt;!exp),零宽度正回顾后发断言来断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。</li>
<li>(?&lt;=&lt;(\w+)&gt;).<em>(?=&lt;\/\1&gt;)匹配不包含属性的简单HTML标签内里的内容。(&lt;?(\w+)&gt;)指定了这样的前缀：被尖括号括起来的单词(比如可能是<b>)，然后是.</b></em>(任意的字符串),最后是一个后缀(?=&lt;\/\1&gt;)。注意后缀里的\/，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的(\w+)匹配的内容，这样如果前缀实际上是<b>的话，后缀就是</b>了。整个表达式匹配的是<b>和</b>之间的内容(再次提醒，不包括前缀和后缀本身)。</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>学会了这些就差不多了我觉得，接下来就是理解运用啦</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则表达式介绍&quot;&gt;&lt;a href=&quot;#正则表达式介绍&quot; class=&quot;headerlink&quot; title=&quot;正则表达式介绍&quot;&gt;&lt;/a&gt;正则表达式介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="正则表达式" scheme="http://blog.zeyu0633.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="Javar必知必会" scheme="http://blog.zeyu0633.com/tags/Javar%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式 概要</title>
    <link href="http://blog.zeyu0633.com/2017/03/12/ze-Summary/"/>
    <id>http://blog.zeyu0633.com/2017/03/12/ze-Summary/</id>
    <published>2017-03-12T02:00:00.000Z</published>
    <updated>2017-03-30T15:09:36.057Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式介绍"><a href="#正则表达式介绍" class="headerlink" title="正则表达式介绍"></a>正则表达式介绍</h3><blockquote>
<p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p>
</blockquote>
<a id="more"></a>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>什么是正则表达式<blockquote>
<p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，<font color="#0099ff" face="STCAIYUN" size="4">正则表达式就是记录文本规则的代码</font>。</p>
</blockquote>
</li>
<li>正则表达式入门<blockquote>
<p>假设你在一篇英文小说里查找on，你可以使用正则表达式<font color="#B22222">on</font>，下面详解。</p>
</blockquote>
</li>
<li>正则表达式测试<blockquote>
<p>推荐两个在线测试正则表达式的工具:</p>
<ul>
<li><a href="http://tool.oschina.net/regex/" target="_blank" rel="external">正则表达式在线测试</a></li>
<li><a href="http://www.sojson.com/regex/" target="_blank" rel="external">正则表达式在线测试</a></li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="入门小栗子"><a href="#入门小栗子" class="headerlink" title="入门小栗子"></a>入门小栗子</h2><h3 id="要实现在一篇英文小说里查找on"><a href="#要实现在一篇英文小说里查找on" class="headerlink" title="要实现在一篇英文小说里查找on"></a>要实现在一篇英文小说里查找on</h3><blockquote>
<p>Back in 2000, when I thought I was going to be a professional writer, I spent hours a day on LiveJournal doing writing practice with other aspiring poets and authors. Since then I’ve blogged at three different domains about web standards, print design, photography, Flash, illustration, information architecture, ColdFusion, package management, PHP, CSS, advertising, Ruby, Rails, and Erlang.</p>
</blockquote>
<h3 id="写法以及延伸"><a href="#写法以及延伸" class="headerlink" title="写法以及延伸"></a>写法以及延伸</h3><blockquote>
<p>可以使用正则表达式<font color="#B22222">on</font><br>精确匹配这样的字符串：由两个字符组成，前一个字符是o,后一个是n。<br>不幸的是，很多单词里包含on这两个连续的字符，比如professional,information等等。用on来查找的话，这里边的on也会被找出来<br>如果要精确地查找on这个单词的话，我们应该使用<font color="#B22222">\bon\b</font>。<br>\b是正则表达式规定的一个特殊代码（好吧，某些人叫它元字符，metacharacter），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是\b并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。<br>那么，像<font color="#B22222">\bhi\b.*\bLucy\b</font>，<font color="#B22222">0\d{2}-\d{8}</font>等又代表什么意思呢？<br>慢慢学~~~</p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>正则表达式定义了字符串的模式。</li>
<li>正则表达式可以用来搜索、编辑或处理文本。</li>
<li>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则表达式介绍&quot;&gt;&lt;a href=&quot;#正则表达式介绍&quot; class=&quot;headerlink&quot; title=&quot;正则表达式介绍&quot;&gt;&lt;/a&gt;正则表达式介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="正则表达式" scheme="http://blog.zeyu0633.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="Javar必知必会" scheme="http://blog.zeyu0633.com/tags/Javar%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>Mysql Learning Index</title>
    <link href="http://blog.zeyu0633.com/2017/03/11/mysqlIndex/"/>
    <id>http://blog.zeyu0633.com/2017/03/11/mysqlIndex/</id>
    <published>2017-03-11T15:00:00.000Z</published>
    <updated>2017-03-30T15:16:11.478Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><blockquote>
<p>最近看了《MySQL 存储过程编程》这本书，再结合在慕课网上的《与MySQL的零距离接触》教程，决定在这里总结一些内容</p>
</blockquote>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><a href="http://blog.zeyu0633.com/2017/03/11/mysqlIndex/">Mysql 目录</a></li>
<li>Mysql 基础</li>
<li><a href="http://blog.zeyu0633.com/2017/03/16/mysql-process/">Mysql 存储过程</a></li>
<li>Mysql 优化</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最近看了《MySQL 存储过程编程》这本书，再结合在慕课网上的《与MySQL的零距离接触》教程，决定在这里总结一些
    
    </summary>
    
      <category term="Mysql" scheme="http://blog.zeyu0633.com/categories/Mysql/"/>
    
    
      <category term="Javar必知必会" scheme="http://blog.zeyu0633.com/tags/Javar%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式 Learning Index</title>
    <link href="http://blog.zeyu0633.com/2017/03/11/zeIndex/"/>
    <id>http://blog.zeyu0633.com/2017/03/11/zeIndex/</id>
    <published>2017-03-11T15:00:00.000Z</published>
    <updated>2017-03-30T15:08:15.864Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式介绍"><a href="#正则表达式介绍" class="headerlink" title="正则表达式介绍"></a>正则表达式介绍</h3><blockquote>
<p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p>
</blockquote>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><a href="http://blog.zeyu0633.com/2017/03/11/zeIndex/">正则表达式 目录</a></li>
<li><a href="http://blog.zeyu0633.com/2017/03/12/ze-Summary/">正则表达式 概要</a></li>
<li><a href="http://blog.zeyu0633.com/2017/03/12/ze-topics/">正则表达式 知识点</a></li>
<li><a href="http://blog.zeyu0633.com/2017/03/12/ze-practices/">正则表达式 实践</a></li>
<li><a href="http://blog.zeyu0633.com/2017/03/12/ze-java/">正则表达式 java</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则表达式介绍&quot;&gt;&lt;a href=&quot;#正则表达式介绍&quot; class=&quot;headerlink&quot; title=&quot;正则表达式介绍&quot;&gt;&lt;/a&gt;正则表达式介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要
    
    </summary>
    
      <category term="正则表达式" scheme="http://blog.zeyu0633.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="Javar必知必会" scheme="http://blog.zeyu0633.com/tags/Javar%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    
  </entry>
  
</feed>
